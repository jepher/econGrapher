{"version":3,"sources":["components/NavPanel.js","utils/LineChartUtils.js","utils/AnnotationRenderer.js","utils/ChartConfig.js","screens/SolowModelScreen.js","screens/ADASModelScreen.js","screens/SIModelScreen.js","screens/CumulativeScreen.js","App.js","reportWebVitals.js","index.js"],"names":["NavPanel","state","sidebarOpen","this","setState","document","querySelector","classList","add","style","display","pointerEvents","remove","closeSidebar","openSidebar","className","onClick","toggleSidebar","padding","to","React","Component","LineChartUtils","chart","pointMetrics","bottomY","topY","maxY","tickMax","tickLow","tooltip","_active","length","highestDataY","set","activePoint","data","_index","y","point","pointProps","borderWidth","xAxis","scales","options","ticksAsNumbers","config","type","Number","ticks","left","right","yAxis","top","bottom","xTickMin","xTickMax","yTickMin","yTickMax","label","getMaximumDimensionsY","yTickLow","getMaximumDimensionsX","xTickLow","leftX","lineHeightAnnotation","datasets","chartArea","AnnotationRenderer","ctx","shadow","_stroke","stroke","save","shadowColor","color","shadowBlur","blur","shadowOffsetX","offset","x","shadowOffsetY","apply","arguments","restore","startY","endY","beginPath","moveTo","lineTo","lineWidth","strokeStyle","startX","endX","setLineDash","offsetX","text","font","textAlign","textBaseline","fillStyle","fillText","DefaultConfig","maintainAspectRatio","title","fontSize","legend","position","xAxes","id","scaleLabel","gridLines","drawOnChartArea","drawTicks","beginAtZero","yAxes","layout","animation","duration","hover","animationDuration","responsiveAnimationDuration","SolowSlider","props","Slider","value","getValue","min","bounds","max","step","onChange","valueString","toFixed","alignItems","marginLeft","info","errors","solowConfig","JSON","parse","stringify","labelString","legendCallback","map","backgroundColor","borderColor","dangerouslySetInnerHTML","__html","DEFAULT_VALUES","SolowModelScreen","getS","s","getA","A","getB","b","getDelta","delta","getN","n","calculateEquilibrium","Math","pow","calculateInvestmentCurve","k","calculateDepreciationCurve","calculateOutputCurve","handleChange","Promise","resolve","updateData","then","kEquilibrium","yEquilibrium","iEquilibrium","checkError","chartReference","current","chartInstance","update","handleSavingChange","event","newValue","handleProductivityChange","handleElasticityChange","handleDepreciationChange","handlePopGrowthChange","reset","labels","function","getFunctionString","round","cubicInterpolationMode","lineTension","chartLegend","errNo","Array","i","colors","forEach","fill","pointRadius","pointHoverRadius","createRef","sliderData","String","fromCharCode","tooltips","enabled","mode","intersect","callbacks","tooltipItem","datasetIndex","custom","tooltipModel","tooltipEl","getElementById","createElement","innerHTML","body","appendChild","opacity","yAlign","titleLines","bodyLines","bodyItem","lines","innerHtml","labelColors","_chart","canvas","getBoundingClientRect","window","pageXOffset","caretX","pageYOffset","caretY","fontFamily","_bodyFontFamily","bodyFontSize","fontStyle","_bodyFontStyle","yPadding","xPadding","solowPlugin","afterDatasetDraw","lineChartUtils","optionsHandler","annotationColor","yEquilibriumPoint","calculatePointPixels","iEquilibriumPoint","getChartBoundaries","drawLineHeightAnnotation","writeAnnotation","drawLineOffsetAnnotation","prevState","j","fct","getTickBounds","generateLegend","ref","plugins","alignItem","ADASSlider","fontWeight","NUM_DECIMALS","margin","displayMessages","message","demoOptionButtons","policyCode","adasConfig","ADASModelScreen","getADOffset","adOffset","getSRASOffset","srasOffset","getLRASOffset","lrasOffset","getYPotential","Y_P","calculateADCurve","Y","ad_1","ad_2","calculateSRASCurve","expected_inflation","gamma","rho","calculateSREquilibrium","calculateTargetOutput","policyTarget","equilibriumInflation","displayMessage","atEquilibrium","abs","policyChoice","handleADChange","animationRunning","prevEquilibrium","handleSRASChange","handleLRASChange","handlePolicyTargetChange","canPlay","playDemo","a","yPotential","tracker","target","sign","dist","interval","setInterval","clearInterval","adasPlugin","afterDatasetsDraw","equilibriumColor","prevEquilibriumColor","yPotentialPoint","equilibriumPoint","drawVerticalLine","prevEquilibriumPoint","targetOutput","width","justifyContent","marginRight","option","SISlider","economyOptionButtons","siConfigDomestic","siConfigWorld","SIModelScreen","getSavingOffset","domesticVars","savingOffset","getInvestmentOffset","investmentOffset","I_auto","G","C_auto","T","calculateWorldEquilibrium","worldVars","calculateSavingCurve","r","calculateRW","d1","d2","w1","w2","diff","rEquilibrium","siEquilibrium","economyType","r_w","worldChartReference","domesticChartReference","handleInvestmentChange","handleWorldRChange","handleWorldOffsetChange","worldOffset","graph","tension","showLine","domesticPlugin","investment","saving","furthestX","rWPoint","deficitColor","surplusColor","isNxPositive","nxPoint1","nxPoint2","annotationPoint","drawHorizontalLine","worldPlugin","CumulativeSlider","mpConfig","isConfig","adConfig","pcConfig","okunsConfig","CumulativeScreen","getR","mpVars","getLambda","lambda","getRAuto","r_auto","getISSlope","isVars","slope","getISOffset","getADSlope","adVars","getUNatural","pcVars","U_n","getOmega","omega","getRho","getOkunsSlope","okunsVars","getOkunsOffset","getMPMessage","mp","getISMessage","is","getADMessage","ad","getPCMessage","pc","getOkunsMessage","okuns","calculateMPInflation","calculateMPCurve","inflation","calculateISCurve","constant","calculateISOutput","calculatePCCurve","U","expectedInflation","calculatePCUnemployment","calculateOkunsCurve","calculateOkunsUnemployment","updateCharts","syncAxes","handleRChange","mpChartReference","isChartReference","adChartReference","pcChartReference","okunsChartReference","mpPlugin","selectedInflation","mpPoint","isPlugin","adPlugin","adPoint","pcPlugin","pcPoint","okunsPlugin","selectedY","okunsPoint","graphs","swap","plugin","getMessage","handleLambdaChange","handleRAutoChange","handleISOffsetChange","handleYPotentialChange","handleUNaturalChange","rTickMax","inflationTickMax","inflationTickMin","uTickMax","key","count","from","keys","flex","Object","flexDirection","App","basename","path","exact","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.4a7573c2.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport '../styles/NavPanel.css';\r\n\r\nexport default class NavPanel extends React.Component{\r\n    constructor(){\r\n        super();\r\n        this.state={\r\n            sidebarOpen: false,\r\n        }\r\n    }\r\n\r\n    openSidebar(){\r\n        this.setState({sidebarOpen: true})\r\n        document.querySelector(\".menu-btn\").classList.add(\"open\");\r\n        document.querySelector(\".sidebar\").classList.add(\"open\");\r\n        document.querySelector(\".overlay\").style.display = 'block';\r\n        document.querySelector(\".overlay\").style.pointerEvents = 'all';\r\n    }\r\n\r\n    closeSidebar(){\r\n        this.setState({sidebarOpen: false})\r\n        document.querySelector(\".menu-btn\").classList.remove(\"open\");\r\n        document.querySelector(\".sidebar\").classList.remove(\"open\");\r\n        document.querySelector(\".overlay\").style.display = 'none';\r\n        document.querySelector(\".overlay\").style.pointerEvents = 'none';\r\n    }\r\n\r\n    toggleSidebar(){\r\n        if(this.state.sidebarOpen)\r\n            this.closeSidebar()\r\n        else\r\n            this.openSidebar()\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <div className=\"overlay\" onClick={()=>this.closeSidebar()}/>\r\n                <button className=\"menu-btn\" onClick={()=>this.toggleSidebar()}>\r\n                    <div className=\"menu-btn-burger\"></div>\r\n                </button>\r\n                <nav className=\"sidebar\">\r\n                    <div className=\"sidebarHead\">\r\n                        <h1 style={{padding:\"1rem 1rem 0rem 1rem\"}}>\r\n                            Navigation\r\n                            <hr/>\r\n                        </h1>\r\n                    </div>\r\n                    <ul>\r\n                        <li>\r\n                            <Link to=\"/solow-model\" className=\"navLink\" onClick={()=>this.closeSidebar()}>\r\n                                Solow Model\r\n                            </Link>                        \r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/ad-as-model\" className=\"navLink\" onClick={()=>this.closeSidebar()}>\r\n                                AD / AS Model\r\n                            </Link>                        \r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/saving-investment-model\" className=\"navLink\" onClick={()=>this.closeSidebar()}>\r\n                                Saving / Investment Model\r\n                            </Link>                        \r\n                        </li>\r\n                        <li>\r\n                            <Link to=\"/cumulative-graphs\" className=\"navLink\" onClick={()=>this.closeSidebar()}>\r\n                                Cumulative Graphs\r\n                            </Link>                        \r\n                        </li>\r\n                    </ul>\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}","/**\r\n   * @name LineChartUtils\r\n   * LineChartUtils calculates metrics about the chart for annotations.\r\n   * @param chart chartjs instance\r\n   */\r\nexport default class LineChartUtils {\r\n    constructor(chart) {\r\n        this.chart = chart;\r\n    }\r\n\r\n    /**\r\n     * calculate the highest possible Y value to draw the line to\r\n     * @param {array} pointMetrics array of dimensions\r\n     */\r\n    calculateHighestDataY(pointMetrics) {\r\n        let [bottomY, topY, maxY, tickMax, tickLow, borderWidth] = pointMetrics;\r\n        let yBRatio = bottomY * (maxY - tickLow);\r\n        let tMRatio = yBRatio / (tickMax - tickLow);\r\n        return bottomY - tMRatio + borderWidth * 2 + topY - 9;\r\n    }\r\n\r\n    isTooltipActive() {\r\n        return this.tooltip._active && this.tooltip._active.length;\r\n    }\r\n\r\n    isPointTooHigh(highestDataY, bottomY, tickLow) {\r\n        if (highestDataY > bottomY) {\r\n            highestDataY = bottomY - tickLow;\r\n        }\r\n        return highestDataY;\r\n    }\r\n\r\n    getPointFromDataset(set, activePoint) {\r\n        return set.data[activePoint._index].y\r\n            ? set.data[activePoint._index].y\r\n            : set.data[activePoint._index];\r\n    }\r\n\r\n    getPointMetrics(set, point, pointProps) {\r\n        let [maxY, borderWidth] = pointProps;\r\n        if (point > maxY) {\r\n            if (set.borderWidth) {\r\n            borderWidth = set.borderWidth;\r\n            maxY = point - borderWidth;\r\n            } else {\r\n            maxY = point;\r\n            }\r\n        }\r\n        return [maxY, borderWidth];\r\n    }\r\n\r\n    getMaximumDimensionsX() {\r\n        const xAxis = this.chart.scales[this.options.xAxis ? this.options.xAxis : \"x-axis-0\"];\r\n        var tickMax, tickLow;\r\n        if (xAxis.ticksAsNumbers) {\r\n            if(this.chart.config.type === \"scatter\"){\r\n                tickLow = xAxis.ticksAsNumbers[0]; \r\n                tickMax = xAxis.ticksAsNumbers[xAxis.ticksAsNumbers.length - 1]; \r\n            }\r\n            else{\r\n                tickMax = xAxis.ticksAsNumbers[0]; // first index is always the tallest\r\n                tickLow = xAxis.ticksAsNumbers[xAxis.ticksAsNumbers.length - 1]; // lowest tick\r\n            }\r\n        }\r\n        else{\r\n            tickLow = Number(xAxis.ticks[0]);\r\n            tickMax = Number(xAxis.ticks[xAxis.ticks.length - 1]);\r\n        }\r\n        let { left, right } = xAxis;\r\n        return [tickMax, tickLow, left, right];\r\n    }\r\n\r\n    getMaximumDimensionsY() {\r\n        const yAxis = this.chart.scales[this.options.yAxis ? this.options.yAxis : \"y-axis-0\"];\r\n        var tickMax, tickLow;\r\n        if (yAxis.ticksAsNumbers) {\r\n            tickMax = yAxis.ticksAsNumbers[0]; // first index is always the tallest\r\n            tickLow = yAxis.ticksAsNumbers[yAxis.ticksAsNumbers.length - 1]; // lowest tick\r\n        }\r\n        else{\r\n            tickLow = Number(yAxis.ticks[0]);\r\n            tickMax = Number(yAxis.ticks[yAxis.ticks.length - 1]);\r\n        }\r\n        let { top, bottom } = yAxis;\r\n        return [tickMax, tickLow, top, bottom];\r\n    }\r\n\r\n    getTickBounds(){\r\n        const xAxis = this.chart.scales[this.options.xAxis ? this.options.xAxis : \"x-axis-0\"];\r\n        const yAxis = this.chart.scales[this.options.yAxis ? this.options.yAxis : \"y-axis-0\"];\r\n        var xTickMin, xTickMax, yTickMin, yTickMax;\r\n        if (xAxis.ticksAsNumbers){\r\n            if(this.chart.config.type === \"scatter\"){\r\n                xTickMin = xAxis.ticksAsNumbers[0]; \r\n                xTickMax = xAxis.ticksAsNumbers[xAxis.ticksAsNumbers.length - 1]; \r\n            }\r\n            else{\r\n                xTickMax = xAxis.ticksAsNumbers[0]; // first index is always the tallest\r\n                xTickMin = xAxis.ticksAsNumbers[xAxis.ticksAsNumbers.length - 1]; // lowest tick\r\n            }\r\n        }\r\n        else{\r\n            xTickMax = Number(xAxis.ticks[xAxis.ticks.length - 1]);\r\n            xTickMin = Number(xAxis.ticks[0]);\r\n        }\r\n        if (yAxis.ticksAsNumbers) {\r\n            yTickMax = yAxis.ticksAsNumbers[0];\r\n            yTickMin = yAxis.ticksAsNumbers[yAxis.ticksAsNumbers.length - 1]; \r\n        }\r\n        else{\r\n            yTickMax = Number(yAxis.ticks[yAxis.ticks.length - 1]);\r\n            yTickMin = Number(yAxis.ticks[0]);\r\n        }\r\n\r\n        return [xTickMin, xTickMax, yTickMin, yTickMax];\r\n    }\r\n\r\n    getChartBoundaries(){\r\n        const xAxis = this.chart.scales[this.options.xAxis ? this.options.xAxis : \"x-axis-0\"];\r\n        let { left, right } = xAxis;\r\n        const yAxis = this.chart.scales[this.options.yAxis ? this.options.yAxis : \"y-axis-0\"];\r\n        let { top, bottom } = yAxis;\r\n        return [top, bottom, left, right];\r\n    }\r\n\r\n    calculatePointPixels(label, data){\r\n        let [yTickMax, yTickLow, topY, bottomY] = this.getMaximumDimensionsY();\r\n        let [xTickMax, xTickLow, leftX, rightX] = this.getMaximumDimensionsX();\r\n        let pixelX = leftX + (rightX - leftX) * (label - xTickLow) / (xTickMax - xTickLow);\r\n        let pixelY = topY + (bottomY - topY) * (yTickMax - data) / (yTickMax - yTickLow);\r\n        return [pixelX, pixelY]\r\n    }\r\n\r\n    get options() {\r\n        return this.chart.options.lineHeightAnnotation\r\n            ? this.chart.options.lineHeightAnnotation\r\n            : false;\r\n    }\r\n\r\n    get tooltip() {\r\n        return this.chart.tooltip;\r\n    }\r\n\r\n    get datasets() {\r\n        return this.chart.config.data.datasets;\r\n    }\r\n\r\n    get xTicks() {\r\n        return this.chart.scales[\"x-axis-0\"].ticks;\r\n    }\r\n\r\n    get yTicks(){\r\n        return this.chart.scales[\"y-axis-0\"].ticks;\r\n    }\r\n\r\n    get chartArea() {\r\n        return this.chart.chartArea;\r\n    }\r\n}","export default class AnnotationRenderer {\r\n        constructor(ctx, options) {\r\n        this.ctx = ctx;\r\n        this.options = options;\r\n        }\r\n    \r\n        /**\r\n         * Add shadow on the line from options. Affects all lines on canvas.\r\n         * Shadow Options: shadowColor, shadowBlur, shadowOffsetX, shadowOffsetY.\r\n         */\r\n        shadow() {\r\n        let options = this.options;\r\n        if (options.shadow) {\r\n            let ctx = this.ctx;\r\n            let { shadow } = options;\r\n            const _stroke = ctx.stroke;\r\n            ctx.stroke = function() {\r\n                ctx.save();\r\n                ctx.shadowColor = shadow.color ? shadow.color : \"rgba(0,0,0,0.35)\";\r\n                ctx.shadowBlur = shadow.blur ? shadow.blur : 10;\r\n                ctx.shadowOffsetX = shadow.offset ? shadow.offset.x : 0;\r\n                ctx.shadowOffsetY = shadow.offset ? shadow.offset.y : 3;\r\n                _stroke.apply(this, arguments);\r\n                ctx.restore();\r\n            };\r\n        }\r\n        }\r\n    \r\n        drawVerticalLine(x, startY, endY, color){\r\n            let ctx = this.ctx;\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.moveTo(x, startY);\r\n            ctx.lineTo(x, endY);\r\n            ctx.lineWidth = 1.5;\r\n            ctx.strokeStyle = color;\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        }\r\n\r\n        drawHorizontalLine(y, startX, endX, color){\r\n            let ctx = this.ctx;\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.moveTo(startX, y);\r\n            ctx.lineTo(endX, y);\r\n            ctx.lineWidth = 1.5;\r\n            ctx.strokeStyle = color;\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        }\r\n\r\n        /**\r\n         * Draw the line height annotation to the highest data point on the chart.\r\n         * @param {int} x horizontal coordinate on canvas\r\n         * @param {int} bottomY bottom Y dimension of the chart\r\n         * @param {float} highestDataY highest possible Y value on the chart, taking padding and border offsets into consideration.\r\n         */\r\n        drawLineHeightAnnotation(x, bottomY, highestDataY) {\r\n            let ctx = this.ctx;\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.setLineDash([10, 10]);\r\n            ctx.moveTo(x, highestDataY);\r\n            ctx.lineTo(x, bottomY);\r\n            ctx.lineWidth = 1.5;\r\n            ctx.strokeStyle = \"#a3a3a3\";\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        }\r\n\r\n        drawLineOffsetAnnotation(y, leftX, offsetX) {\r\n            let ctx = this.ctx;\r\n            ctx.save();\r\n            ctx.beginPath();\r\n            ctx.setLineDash([10, 10]);\r\n            ctx.moveTo(leftX, y);\r\n            ctx.lineTo(offsetX, y);\r\n            ctx.lineWidth = 1.5;\r\n            ctx.strokeStyle = \"#a3a3a3\";\r\n            ctx.stroke();\r\n            ctx.restore();\r\n        }\r\n\r\n        writeAnnotation(text, x, y, color){\r\n            var ctx = this.ctx;\r\n            ctx.font = \"normal 16px Helvetica\";    \r\n            ctx.color = \"red\";\r\n            ctx.textAlign = \"center\";\r\n            ctx.textBaseline = \"middle\";\r\n            ctx.fillStyle = color;\r\n            ctx.fillText(text,x,y);\r\n        }\r\n  }","const DefaultConfig = {\r\n                    maintainAspectRatio: false,\r\n                    title:{\r\n                        display:true,\r\n                        fontSize:20\r\n                    },\r\n                    legend:{\r\n                        display: true,\r\n                        position:'right',\r\n                    },\r\n                    scales: {\r\n                        xAxes: [{\r\n                            id: \"x-axis-0\",\r\n                            scaleLabel:{\r\n                                display: true,\r\n                            },        \r\n                            gridLines:{\r\n                                drawOnChartArea: false,\r\n                                drawTicks: false,\r\n                            },                            \r\n                            ticks: {\r\n                                display: false,\r\n                                beginAtZero: true,\r\n                            }\r\n                        }],\r\n                        yAxes: [{\r\n                            id: \"y-axis-0\",\r\n                            scaleLabel:{\r\n                                display: true,\r\n                            }, \r\n                            gridLines:{\r\n                                drawOnChartArea: false,\r\n                                drawTicks: false,\r\n                            },\r\n                            ticks: {\r\n                                display: false,\r\n                                beginAtZero: true,\r\n                            }\r\n                        }]\r\n                    },\r\n                    layout: {\r\n                        padding: {\r\n                            left: 50,\r\n                            right: 50,\r\n                            bottom: 50\r\n                        }\r\n                    },\r\n                    animation: {\r\n                        duration: 0 \r\n                    },\r\n                    hover: {\r\n                        animationDuration: 0 \r\n                    },\r\n                    responsiveAnimationDuration: 0,\r\n                };\r\nexport default DefaultConfig;","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport { Slider } from '@material-ui/core';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\n\r\nimport LineChartUtils from '../utils/LineChartUtils';\r\nimport AnnotationRenderer from '../utils/AnnotationRenderer';  \r\nimport DefaultConfig from '../utils/ChartConfig';\r\n\r\nimport '../styles/SolowModelScreen.css';\r\n\r\nconst NUM_DECIMALS = 4;\r\n\r\nfunction SolowSlider(props){\r\n    return (\r\n        <div className=\"sliderContainer\">\r\n            <div className=\"slider\">\r\n                <Slider value={props.data.getValue()} \r\n                        min={props.data.bounds[0]}\r\n                        max={props.data.bounds[1]}\r\n                        step={0.0001}\r\n                        onChange={props.data.onChange} \r\n                />\r\n            </div>\r\n            <p>{props.data.valueString} = {props.data.getValue().toFixed(NUM_DECIMALS)}</p>\r\n            <div style={{display: \"flex\", alignItems:\"center\", marginLeft:\"0.5rem\"}}>\r\n                <HelpOutlineIcon className=\"sliderHelpIcon\" style={{fontSize:\"1.5rem\"}}/>\r\n                <div className=\"sliderTooltip\">{props.data.info}</div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst NUM_DATA_POINTS = 10;\r\nconst errors = [\r\n    \"\",\r\n    \"k* is out of range for the graph\",\r\n    \"i* is out of range for the graph\",\r\n    \"y* is out of range for the graph\"\r\n]\r\nconst NO_ERROR = 0;\r\nconst K_OUT_OF_BOUNDS = 1;\r\nconst I_OUT_OF_BOUNDS = 2;\r\nconst Y_OUT_OF_BOUNDS = 3;\r\n\r\nlet solowConfig = JSON.parse(JSON.stringify(DefaultConfig));\r\nsolowConfig.title.text = \"Solow Model\";\r\nsolowConfig.scales.xAxes[0].scaleLabel.labelString = \"Capital per worker (k)\";\r\nsolowConfig.scales.xAxes[0].ticks.min = 0;\r\nsolowConfig.scales.yAxes[0].scaleLabel.labelString = \"Output per worker (y)\";\r\nsolowConfig.scales.yAxes[0].ticks.min = 0;\r\nsolowConfig.legend.display = false;\r\nsolowConfig.legendCallback = function(chart) {\r\n    return <ul>\r\n                {chart.data.datasets.map(set=>{\r\n                    return <li key={set.label} className=\"legendItem\">\r\n                        <div className=\"legendColor\" style={{backgroundColor: set.borderColor}}/>\r\n                        <p>{set.label}</p>\r\n                        <div className=\"legendTooltip\" dangerouslySetInnerHTML={{__html: set.info}} style={{backgroundColor: set.borderColor}}/>\r\n                    </li>\r\n                })}\r\n            </ul>\r\n}\r\n\r\nconst DEFAULT_VALUES = {\r\n    s: 0.5,\r\n    A: 1.5,\r\n    b: 0.5, \r\n    delta: 0.3,\r\n    n: 0.3\r\n}\r\n\r\nexport default class SolowModelScreen extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            s: DEFAULT_VALUES.s, // saving rate\r\n            A: DEFAULT_VALUES.A, // total factor productivity\r\n            b: DEFAULT_VALUES.b, // output elasticity of capital\r\n            delta: DEFAULT_VALUES.delta, // depreciation rate \r\n            n: DEFAULT_VALUES.n, // population growth \r\n            data: {\r\n                labels: [],\r\n                datasets: [\r\n                    {\r\n                        label: 'Output curve',\r\n                        function: this.calculateOutputCurve,\r\n                        getFunctionString: ()=>(\"y<sub>t</sub> = \" + (Math.round(this.state.A * Math.pow(10, NUM_DECIMALS)) / Math.pow(10, NUM_DECIMALS)) + \"k<sub>t</sub><sup>\" + (Math.round(this.state.b * Math.pow(10, NUM_DECIMALS)) / Math.pow(10, NUM_DECIMALS)) + \"</sup>\"),\r\n                        cubicInterpolationMode: 'monotone',\r\n                        info: \"The output curve shows the relationship between output per worker and capital per worker. The general equation for the output curve is y<sub>t</sub> = Ak<sub>t</sub><sup>b</sup>, so as capital per worker increases, output per worker increases.\"\r\n                    },\r\n                    {\r\n                        label: 'Investment curve',\r\n                        function: this.calculateInvestmentCurve,\r\n                        getFunctionString: ()=>(\"i<sub>t</sub> = \" + (Math.round((this.state.s * this.state.A) * Math.pow(10, NUM_DECIMALS)) / Math.pow(10, NUM_DECIMALS)) + \"k<sub>t</sub><sup>\" + (Math.round(this.state.b * Math.pow(10, NUM_DECIMALS)) / Math.pow(10, NUM_DECIMALS)) + \"</sup>\"),\r\n                        cubicInterpolationMode: 'monotone',\r\n                        info: \"The investment curve reveals the relationship between per capita investment and capital per worker. The general equation for the investment curve is i<sub>t</sub> = sAk<sub>t</sub><sup>b</sup>, so as capital per worker increases, per capita investment increases.\"\r\n                    },\r\n                    {\r\n                        label: 'Depreciation curve',\r\n                        function: this.calculateDepreciationCurve,\r\n                        getFunctionString: ()=>(\"Depreciation = \" + (Math.round((this.state.delta + this.state.n) * Math.pow(10, NUM_DECIMALS)) / Math.pow(10, NUM_DECIMALS)) + \"k<sub>t</sub>\"),\r\n                        lineTension: 0,\r\n                        info: \"The depreciation curve shows the relationship between loss of capital and capital per worker. The general equation for the depreciation curve is (&delta; + n)k<sub>t</sub>, so as capital per worker increases, depreciation increases.\"\r\n                    },\r\n                ]\r\n            },\r\n            chartLegend: \"\",\r\n            errNo: 0\r\n        }\r\n        \r\n        // populate dataset\r\n        var data = this.state.data;\r\n        data.labels = new Array(NUM_DATA_POINTS);\r\n        for(var i = 0; i <= NUM_DATA_POINTS; i++)\r\n            data.labels[i] = i;\r\n\r\n        var colors = [\"rgb(20, 245, 50)\", \"rgb(35, 187, 247)\", \"rgb(237, 67, 55)\"];\r\n        data.datasets.forEach((set, i)=>{\r\n            set.data = new Array(NUM_DATA_POINTS);\r\n            set.borderColor = colors[i];\r\n            set.borderWidth = 2; \r\n            set.fill = false;\r\n            set.pointRadius = 0;\r\n            set.pointHoverRadius = 0;\r\n        })\r\n        \r\n        this.chartReference = React.createRef();\r\n        this.sliderData = [\r\n            {\r\n                getValue: this.getS,\r\n                valueString: \"s\",\r\n                bounds: [0, 1],\r\n                onChange: this.handleSavingChange,\r\n                info: \"The saving rate (s) is the fixed percentage of the consumer's income that they save every year. The saving rate must be between 0 and 1.\"\r\n            },\r\n            {\r\n                getValue: this.getA,\r\n                valueString: \"A\",\r\n                bounds: [0.0001, 3],\r\n                onChange: this.handleProductivityChange,\r\n                info: \"Total factor productivity (A) is a positive value that represents how productive capital and labor in an economy are together. Total factor productivity can be affected by supply shocks.\"\r\n            },\r\n            {\r\n                getValue: this.getB,\r\n                valueString: \"b\",\r\n                bounds: [0, 1],\r\n                onChange: this.handleElasticityChange,\r\n                info: \"Elasticity of capital (b) is a value that measures the responsiveness of output to a change in the level of capital. The elasticity of capital must be between 0 and 1.\"\r\n            },\r\n            {\r\n                getValue: this.getDelta,\r\n                valueString: String.fromCharCode(948),\r\n                bounds: [0, 1],\r\n                onChange: this.handleDepreciationChange,\r\n                info: \"The depreciation rate (\" + String.fromCharCode(948) + \") is the fixed percentage of capital resources such as machines and factories that wear out each year. The depreciation rate must be between 0 and 1.\"\r\n            },\r\n            {\r\n                getValue: this.getN,\r\n                valueString: \"n\",\r\n                bounds: [0, 1],\r\n                onChange: this.handlePopGrowthChange,\r\n                info: \"The population growth rate (n) is the yearly percentage growth of workers in the labor force, assuming the number of workers grows at the same rate as the overall population. The population growth rate must be between 0 and 1.\"\r\n            },\r\n        ];      \r\n\r\n        // set solowConfig tooltips\r\n        solowConfig.tooltips = {\r\n            enabled: false,\r\n            mode: 'nearest',\r\n            intersect: false,\r\n            callbacks: {\r\n                title: function(tooltipItem, data) {\r\n                    return data.datasets[tooltipItem[0].datasetIndex].label;\r\n                },\r\n                label: function(tooltipItem, data) {\r\n                    return data.datasets[tooltipItem.datasetIndex].getFunctionString();\r\n                },\r\n            },\r\n            custom: function(tooltipModel) {\r\n                // Tooltip Element\r\n                var tooltipEl = document.getElementById('chartjs-tooltip');\r\n        \r\n                // Create element on first render\r\n                if (!tooltipEl) {\r\n                    tooltipEl = document.createElement('div');\r\n                    tooltipEl.id = 'chartjs-tooltip';\r\n                    tooltipEl.innerHTML = '<table></table>';\r\n                    document.body.appendChild(tooltipEl);\r\n                }\r\n        \r\n                // Hide if no tooltip\r\n                if (tooltipModel.opacity === 0) {\r\n                    tooltipEl.style.opacity = 0;\r\n                    return;\r\n                }\r\n        \r\n                // Set caret Position\r\n                tooltipEl.classList.remove('above', 'below', 'no-transform');\r\n                if (tooltipModel.yAlign) {\r\n                    tooltipEl.classList.add(tooltipModel.yAlign);\r\n                } else {\r\n                    tooltipEl.classList.add('no-transform');\r\n                }\r\n        \r\n                function getBody(bodyItem) {\r\n                    return bodyItem.lines;\r\n                }\r\n        \r\n                // Set Text\r\n                if (tooltipModel.body) {\r\n                    var titleLines = tooltipModel.title || [];\r\n                    var bodyLines = tooltipModel.body.map(getBody);\r\n        \r\n                    var innerHtml = '<thead>';\r\n        \r\n                    titleLines.forEach(function(title) {\r\n                        innerHtml += '<tr><th>' + title + '</th></tr>';\r\n                    });\r\n                    innerHtml += '</thead><tbody>';\r\n        \r\n                    bodyLines.forEach(function(body, i) {\r\n                        var colors = tooltipModel.labelColors[i];\r\n                        var style = 'background:' + colors.backgroundColor;\r\n                        style += '; border-color:' + colors.borderColor;\r\n                        style += '; border-width: 2px';\r\n                        var span = '<span style=\"' + style + '\"></span>';\r\n                        innerHtml += '<tr><td>' + span + body + '</td></tr>';\r\n                    });\r\n                    innerHtml += '</tbody>';\r\n        \r\n                    var tableRoot = tooltipEl.querySelector('table');\r\n                    tableRoot.innerHTML = innerHtml;\r\n                }\r\n        \r\n                // `this` will be the overall tooltip\r\n                var position = this._chart.canvas.getBoundingClientRect();\r\n        \r\n                // Display, position, and set styles for font\r\n                tooltipEl.style.opacity = 1;\r\n                tooltipEl.style.position = 'absolute';\r\n                tooltipEl.style.left = position.left + window.pageXOffset + tooltipModel.caretX + 'px';\r\n                tooltipEl.style.top = position.top + window.pageYOffset + tooltipModel.caretY + 'px';\r\n                tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;\r\n                tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';\r\n                tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;\r\n                tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';\r\n                tooltipEl.style.pointerEvents = 'none';\r\n            }\r\n        }\r\n        \r\n        this.solowPlugin = {\r\n            id: \"solowPlugin\",\r\n            // draw annotation lines\r\n            afterDatasetDraw: chart => {\r\n                if(this.state.errNo === K_OUT_OF_BOUNDS) return;\r\n                const lineChartUtils = new LineChartUtils(chart);\r\n                const options = lineChartUtils.options;\r\n                const ctx = chart.ctx;\r\n            \r\n                const optionsHandler = new AnnotationRenderer(ctx, options);\r\n                optionsHandler.shadow();\r\n            \r\n                const annotationColor = \"#ff2626\";\r\n                let kEquilibrium = this.calculateEquilibrium();\r\n                let yEquilibrium = this.calculateOutputCurve(kEquilibrium);\r\n                let yEquilibriumPoint = lineChartUtils.calculatePointPixels(kEquilibrium, yEquilibrium);\r\n                let iEquilibrium = this.calculateInvestmentCurve(kEquilibrium);\r\n                let iEquilibriumPoint = lineChartUtils.calculatePointPixels(kEquilibrium, iEquilibrium);\r\n                let [, bottom, left,] = lineChartUtils.getChartBoundaries();\r\n\r\n                // k* vertical line\r\n                optionsHandler.drawLineHeightAnnotation(\r\n                    yEquilibriumPoint[0],\r\n                    bottom,\r\n                    yEquilibriumPoint[1]\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"k* = \" + kEquilibrium.toFixed(2),\r\n                    yEquilibriumPoint[0],\r\n                    bottom + 20,\r\n                    annotationColor\r\n                )\r\n\r\n                // i* horizontal line\r\n                if(this.state.errNo === I_OUT_OF_BOUNDS) return;\r\n                 optionsHandler.drawLineOffsetAnnotation(\r\n                    iEquilibriumPoint[1],\r\n                    left,\r\n                    iEquilibriumPoint[0],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"i* = \" + iEquilibrium.toFixed(2),\r\n                    left - 35,\r\n                    iEquilibriumPoint[1],\r\n                    annotationColor \r\n                )\r\n\r\n                // y* horizontal line\r\n                if(this.state.errNo === Y_OUT_OF_BOUNDS) return;\r\n                optionsHandler.drawLineOffsetAnnotation(\r\n                    yEquilibriumPoint[1],\r\n                    left,\r\n                    yEquilibriumPoint[0]\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"y* = \" + yEquilibrium.toFixed(2),\r\n                    left - 35,\r\n                    yEquilibriumPoint[1],\r\n                    annotationColor\r\n                )\r\n            }\r\n        }\r\n    }\r\n\r\n    getS = () => (this.state.s);\r\n    getA = () => (this.state.A);\r\n    getB = () => (this.state.b);\r\n    getDelta = () => (this.state.delta);\r\n    getN = () => (this.state.n);\r\n\r\n    calculateEquilibrium = () => (Math.pow(this.state.s * this.state.A / (this.state.delta + this.state.n), 1 / (1 - this.state.b)))\r\n    calculateInvestmentCurve = k => (this.state.s * this.state.A * Math.pow(k, this.state.b))\r\n    calculateDepreciationCurve = k => ((this.state.delta + this.state.n) * k)\r\n    calculateOutputCurve = k => (this.state.A * Math.pow(k, this.state.b))\r\n\r\n    updateData(){\r\n        this.setState(prevState =>{\r\n            var data = prevState.data;\r\n            for (var i = 0; i < data.datasets.length; i++) {\r\n                for (var j = 0; j < NUM_DATA_POINTS; j++) {\r\n                    var fct = data.datasets[i].function,\r\n                        x = data.labels[j],\r\n                        y = fct(x);\r\n                    data.datasets[i].data[j] = y;\r\n                }\r\n            }\r\n            return {data};\r\n        }) \r\n    }\r\n    \r\n    checkError(kEquilibrium, yEquilibrium, iEquilibrium){\r\n        // check if graph is correct\r\n        const lineChartUtils = new LineChartUtils(this.chartReference.current.chartInstance);\r\n        let [xTickMin, xTickMax, yTickMin, yTickMax] = lineChartUtils.getTickBounds();\r\n        if(kEquilibrium > xTickMax || kEquilibrium < xTickMin)\r\n            this.setState({errNo: K_OUT_OF_BOUNDS})\r\n        else if(iEquilibrium > yTickMax || iEquilibrium < yTickMin)\r\n            this.setState({errNo: I_OUT_OF_BOUNDS})\r\n        else if(yEquilibrium > yTickMax || yEquilibrium < yTickMin)\r\n            this.setState({errNo: Y_OUT_OF_BOUNDS})\r\n        else\r\n            this.setState({errNo: NO_ERROR})\r\n    }\r\n\r\n    handleChange = () =>{\r\n        new Promise(resolve =>{\r\n            this.updateData();\r\n            resolve();\r\n        }).then(()=>{\r\n            let kEquilibrium = this.calculateEquilibrium();\r\n            let yEquilibrium = this.calculateOutputCurve(kEquilibrium);\r\n            let iEquilibrium = this.calculateInvestmentCurve(kEquilibrium);\r\n    \r\n            // check for graph errors\r\n            this.checkError(kEquilibrium, yEquilibrium, iEquilibrium);\r\n    \r\n            this.chartReference.current.chartInstance.update();\r\n        })\r\n    }\r\n\r\n    handleSavingChange = (event, newValue) => {\r\n        this.setState({s: newValue}, \r\n            () => {\r\n                this.handleChange();\r\n            });\r\n    }\r\n\r\n    handleProductivityChange = (event, newValue) => {\r\n        this.setState({A: newValue}, \r\n            () => {\r\n                this.handleChange();\r\n            });\r\n    }\r\n\r\n    handleElasticityChange = (event, newValue) => {\r\n        this.setState({b: newValue}, \r\n            () => {\r\n                this.handleChange();\r\n            });\r\n    }\r\n\r\n    handleDepreciationChange = (event, newValue) => {\r\n        this.setState({delta: newValue}, \r\n            () => {\r\n                this.handleChange();\r\n            });\r\n    }\r\n\r\n    handlePopGrowthChange = (event, newValue) => {\r\n        this.setState({n: newValue}, \r\n            () => {\r\n                this.handleChange();\r\n            });\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({s: DEFAULT_VALUES.s, A: DEFAULT_VALUES.A, b: DEFAULT_VALUES.b, delta: DEFAULT_VALUES.delta, n: DEFAULT_VALUES.n}, () => {\r\n            this.handleChange();\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        // generate legend\r\n        this.setState({chartLegend: this.chartReference.current.chartInstance.generateLegend()});\r\n        this.updateData();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"solowScreen\" className=\"screen\">\r\n            <div className=\"graphPanel\">\r\n                <div className=\"graphContainer\">\r\n                    <Line\r\n                        ref={this.chartReference}\r\n                        data={this.state.data}\r\n                        plugins={[this.solowPlugin]}\r\n                        options={solowConfig}  \r\n                    />\r\n                </div>\r\n                <div className=\"legendContainer\">\r\n                    {this.state.chartLegend}\r\n                </div>\r\n            </div>\r\n            <div className=\"userInterface\">\r\n                <div className=\"sliderSection\">\r\n                    {this.sliderData.map((data, i) =>\r\n                        <SolowSlider key={\"slider\" + i} data={data}/>\r\n                    )}\r\n                    <div className=\"resetButton\" onClick={this.reset}>Reset</div>\r\n                </div>\r\n                <div>\r\n                    <div className=\"errorDisplay\" style={{opacity: this.state.errNo === NO_ERROR ? 0 : 1}}>\r\n                        <div style={{display:\"flex\", alignItem:\"center\"}}>\r\n                            <ErrorOutlineIcon/>\r\n                            {errors[this.state.errNo]}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"descriptionSection\">\r\n                <h2>The Solow Model</h2>\r\n                <p>\r\n                    The Solow model examines the economy in per-worker terms using \r\n                    the capital-labor ratio (<i>k</i>), which represents the capital per worker, \r\n                    and the output per worker (<i>y</i>). The model identifies the steady state \r\n                    output and capital per worker using the intersection of the investment \r\n                    and depreciation curves. \r\n                </p>\r\n                <p>\r\n                    Changes in the Solow model are caused by capital accumulation per worker (&#916;<i>k</i>), \r\n                    which is determined by the levels of investment and depreciation. Capital per worker will \r\n                    change until there is no more capital accumlation per worker. This is because if investment is \r\n                    less than depreciation, then in each unit of time, each worker receives more capital \r\n                    and <i>k</i> will increase until it reaches the level of depreciation where \r\n                    there is no more marginal capital. On the other hand, if depreciation is greater \r\n                    than investment, workers are losing capital stock to depreciation in each unit of time and so&nbsp;\r\n                    <i>k</i> will decrease until it reaches the level of investment that matches the level of \r\n                    depreciation. The level of capital per worker where investment and \r\n                    depreciation is equal is the steady state or equilibrium capital-labor \r\n                    ratio (<i>k</i>*) and is used to find the equilibrium output in the output function.  \r\n                </p>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Line} from 'react-chartjs-2';\r\nimport { Slider } from '@material-ui/core';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\r\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\r\n\r\nimport LineChartUtils from '../utils/LineChartUtils';\r\nimport AnnotationRenderer from '../utils/AnnotationRenderer';  \r\nimport DefaultConfig from '../utils/ChartConfig';\r\n\r\nimport \"../styles/ADASModelScreen.css\"\r\n\r\nfunction ADASSlider(props){\r\n    return (\r\n        <div className=\"sliderContainer\">\r\n            <div style={{display: \"flex\"}}>\r\n                <p style={{color: props.data.color, fontWeight: 600}}>{props.data.valueString}</p>\r\n                <p>&nbsp;= {props.data.getValue().toFixed(NUM_DECIMALS)}</p>\r\n            </div>\r\n            <div className=\"slider\">\r\n                <div className=\"sliderLabel left\">\r\n                    {props.data.labels[0]}\r\n                </div>\r\n                <Slider style={{margin: \"0 1.5rem\"}}\r\n                        value={props.data.getValue()} \r\n                        min={props.data.bounds[0]}\r\n                        max={props.data.bounds[1]}\r\n                        step={0.0001}\r\n                        onChange={props.data.onChange} \r\n                />\r\n                <div className=\"sliderLabel right\">\r\n                    {props.data.labels[1]}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst NUM_DATA_POINTS = 2;\r\nconst NUM_DECIMALS = 4;\r\nconst STEP = 5;\r\nconst EPSILON = 0.001;\r\n\r\nconst NO_ERROR = 0;\r\nconst Y_OUT_OF_BOUNDS = 1;\r\nconst Y_NEGATIVE = 2;\r\nconst INFLATION_OUT_OF_BOUNDS = 3;\r\nconst INFLATION_TARGET_OUT_OF_BOUNDS = 4;\r\nconst AT_EQUILIBRIUM = 5;\r\nconst NO_POLICY_SELECTED = 6;\r\n\r\nconst displayMessages = [\r\n    {\r\n        message: \"\",\r\n        color: \"#fa4848\"\r\n    },\r\n    {\r\n        message: \"Y* is out of range for the graph\",\r\n        color: \"#fa4848\"\r\n    },\r\n    {\r\n        message: \"Y* is negative\",\r\n        color: \"#fa4848\"\r\n    },\r\n    {\r\n        message: \"\\u03C0* is out of range for the graph\",\r\n        color: \"#fa4848\"\r\n    },\r\n    {\r\n        message: \"\\u03C0\\u1D40 is out of range for the graph\",\r\n        color: \"#fa4848\"\r\n    },\r\n    {\r\n        message: \"The economy is at its long-run equilibrium\",\r\n        color: \"#23db29\"\r\n    },\r\n    {\r\n        message: \"Select a policy to continue\",\r\n        color: \"#ffd630\"\r\n    }\r\n]\r\n\r\nconst POLICY_NONE = 0;\r\nconst POLICY_INFLATION = 1;\r\nconst POLICY_OUTPUT = 2;\r\nconst DEFAULT_POLICY_TARGET = 2;\r\nvar demoOptionButtons = [\r\n    {\r\n        text: \"No policy\",\r\n        policyCode: POLICY_NONE\r\n    },\r\n    {\r\n        text: \"Stabilize inflation\",\r\n        policyCode: POLICY_INFLATION\r\n    },\r\n    {\r\n        text: \"Stabilize output\",\r\n        policyCode: POLICY_OUTPUT \r\n    }\r\n]  \r\n\r\nlet adasConfig = JSON.parse(JSON.stringify(DefaultConfig));\r\nadasConfig.title.text = \"AD / AS Model\";\r\nadasConfig.scales.xAxes[0].scaleLabel.labelString = \"Aggregate output, Y ($ trillions)\";\r\nadasConfig.scales.xAxes[0].ticks.min = 0;\r\nadasConfig.scales.yAxes[0].scaleLabel.labelString = \"Inflation rate, \\u03C0 (%)\";\r\nadasConfig.scales.yAxes[0].ticks.min = -10;\r\nadasConfig.legend.display = true;\r\nadasConfig.layout.padding.left = 65;\r\n\r\nconst VERTICAL_ANNOTATION_OFFSET = 25;\r\nconst HORIZONTAL_ANNOTATION_OFFSET = 45;\r\n\r\nexport default class ADASModelScreen extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            gamma: 1.5, // sensitivity of inflation to changes in unemployment gap\r\n            expected_inflation: 2, \r\n            Y_P: 2.5, // potential output\r\n            rho: 0, // price shock\r\n            ad_1: 7,\r\n            ad_2: 2,\r\n            adOffset: 0,\r\n            srasOffset: 0,\r\n            lrasOffset: 0,\r\n            data: {\r\n                labels: [],\r\n                datasets: []\r\n            },\r\n            chartLegend: \"\",\r\n            displayMessage: AT_EQUILIBRIUM,\r\n            policyChoice: -1,\r\n            atEquilibrium: true,\r\n            prevEquilibrium: null,\r\n            policyTarget: DEFAULT_POLICY_TARGET,\r\n            animationRunning: false,\r\n        }\r\n\r\n        // populate dataset\r\n        var colors = [\"rgb(20, 245, 50)\", \"rgb(35, 187, 247)\", \"rgb(237, 67, 55)\"];\r\n        var data = this.state.data;\r\n        data.labels = new Array(NUM_DATA_POINTS);\r\n        for(var i = 0; i < NUM_DATA_POINTS; i++)\r\n            data.labels[i] = i * STEP;\r\n\r\n        data.datasets = [\r\n            {\r\n                label: 'AD curve',\r\n                function: this.calculateADCurve,\r\n                info: \"\"\r\n            },\r\n            {\r\n                label: 'SRAS curve',\r\n                function: this.calculateSRASCurve,\r\n                info: \"\"\r\n            },\r\n            {\r\n                label: 'LRAS curve',\r\n                function: null,\r\n                info: \"\"\r\n            },\r\n        ]\r\n\r\n        data.datasets.forEach((set, i)=>{\r\n            set.data = new Array(NUM_DATA_POINTS);\r\n            set.borderColor = colors[i];\r\n            set.borderWidth = 2; \r\n            set.fill = false;\r\n            set.pointRadius = 0;\r\n            set.pointHoverRadius = 0;\r\n            set.lineTension = 0;\r\n        })\r\n\r\n        this.chartReference = React.createRef();\r\n        // initialize slider data\r\n        this.sliderData = [\r\n            {\r\n                getValue: this.getADOffset,\r\n                valueString: \"Aggregate demand curve shift\",\r\n                bounds: [-10, 10],\r\n                labels: [\"Negative demand shock\", \"Positive demand shock\"],\r\n                color: colors[0],\r\n                onChange: this.handleADChange,\r\n            },\r\n            {\r\n                getValue: this.getSRASOffset,\r\n                valueString: \"Short run aggregate supply curve shift\",\r\n                bounds: [-8, 8],\r\n                labels: [\"Negative supply shock\", \"Positive supply shock\"],\r\n                color: colors[1],\r\n                onChange: this.handleSRASChange,\r\n            },\r\n            {\r\n                getValue: this.getLRASOffset,\r\n                valueString: \"Long run aggregate supply curve shift\",\r\n                labels: [\"Negative supply shock\", \"Positive supply shock\"],\r\n                bounds: [-5, 5],\r\n                color: colors[2],\r\n                onChange: this.handleLRASChange,\r\n            },\r\n        ];\r\n\r\n        this.adasPlugin = {\r\n            id: \"adasPlugin\",\r\n            afterDatasetsDraw: chart => {\r\n                const lineChartUtils = new LineChartUtils(chart);\r\n                const options = lineChartUtils.options;\r\n                const ctx = chart.ctx;\r\n                \r\n                const optionsHandler = new AnnotationRenderer(ctx, options);\r\n                optionsHandler.shadow();\r\n\r\n                const equilibriumColor = \"#e01bda\";\r\n                const prevEquilibriumColor = \"#de9000\";\r\n                let yPotentialPoint = lineChartUtils.calculatePointPixels(this.state.Y_P + this.state.lrasOffset, 0);\r\n                let yEquilibrium = this.calculateSREquilibrium();\r\n                let equilibriumInflation = this.calculateADCurve(yEquilibrium);\r\n                let equilibriumPoint = lineChartUtils.calculatePointPixels(yEquilibrium, equilibriumInflation);\r\n\r\n                let [top, bottom, left, right] = lineChartUtils.getChartBoundaries();\r\n\r\n                // draw LRAS curve\r\n                optionsHandler.drawVerticalLine(\r\n                    yPotentialPoint[0],\r\n                    bottom,\r\n                    top,\r\n                    this.state.data.datasets[2].borderColor\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"Y\\u1D3E = \" + this.getYPotential().toFixed(2),\r\n                    yPotentialPoint[0],\r\n                    bottom + 40,\r\n                    this.state.data.datasets[2].borderColor \r\n                )\r\n\r\n                // Y* vertical line\r\n                if(this.state.displayMessage === Y_OUT_OF_BOUNDS || this.state.displayMessage === Y_NEGATIVE) return;\r\n                optionsHandler.drawLineHeightAnnotation(\r\n                    equilibriumPoint[0],\r\n                    bottom,\r\n                    equilibriumPoint[1]\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"Y* = \" + yEquilibrium.toFixed(2),\r\n                    equilibriumPoint[0],\r\n                    bottom + VERTICAL_ANNOTATION_OFFSET,\r\n                    equilibriumColor\r\n                )\r\n\r\n                // inflation* horizontal line\r\n                if(this.state.displayMessage === INFLATION_OUT_OF_BOUNDS) return;\r\n                optionsHandler.drawLineOffsetAnnotation(\r\n                    equilibriumPoint[1],\r\n                    left,\r\n                    equilibriumPoint[0]\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"\\u03C0* = \" + equilibriumInflation.toFixed(2),\r\n                    left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                    equilibriumPoint[1],\r\n                    equilibriumColor\r\n                )\r\n\r\n                // draw annotations for policy target\r\n                if(this.state.policyChoice === POLICY_INFLATION && equilibriumInflation !== this.state.policyTarget){\r\n                    let policyTarget = lineChartUtils.calculatePointPixels(0, this.state.policyTarget);\r\n\r\n                    // target inflation \r\n                    optionsHandler.drawLineOffsetAnnotation(\r\n                        policyTarget[1],\r\n                        left,\r\n                        right\r\n                    );\r\n                    optionsHandler.writeAnnotation(\r\n                        \"\\u03C0\\u1D40 = \" + this.state.policyTarget.toFixed(2),\r\n                        left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                        policyTarget[1],\r\n                        this.state.data.datasets[2].borderColor\r\n                    )\r\n                }\r\n\r\n                // draw annotations for previous equilibrium (when playing animation)\r\n                if(this.state.prevEquilibrium){\r\n                    let prevEquilibriumPoint = lineChartUtils.calculatePointPixels(this.state.prevEquilibrium[0], this.state.prevEquilibrium[1]);\r\n                    // previous Y* \r\n                    optionsHandler.drawLineHeightAnnotation(\r\n                        prevEquilibriumPoint[0],\r\n                        bottom,\r\n                        prevEquilibriumPoint[1]\r\n                    );\r\n                    optionsHandler.writeAnnotation(\r\n                        \"Y*\\u208B\\u2081 = \" + this.state.prevEquilibrium[0].toFixed(2),\r\n                        prevEquilibriumPoint[0],\r\n                        bottom + 25,\r\n                        prevEquilibriumColor\r\n                    )\r\n\r\n                    // previous inflation* \r\n                    optionsHandler.drawLineOffsetAnnotation(\r\n                        prevEquilibriumPoint[1],\r\n                        left,\r\n                        prevEquilibriumPoint[0]\r\n                    );\r\n                    optionsHandler.writeAnnotation(\r\n                        \"\\u03C0*\\u208B\\u2081 = \" + this.state.prevEquilibrium[1].toFixed(2),\r\n                        left - HORIZONTAL_ANNOTATION_OFFSET - 5,\r\n                        prevEquilibriumPoint[1],\r\n                        prevEquilibriumColor\r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getADOffset = ()=>(this.state.adOffset);\r\n    getSRASOffset = () => (this.state.srasOffset);\r\n    getLRASOffset = () => (this.state.lrasOffset);\r\n    getYPotential = () => (this.state.lrasOffset + this.state.Y_P)\r\n\r\n    calculateADCurve = (Y) => (this.state.ad_1 - this.state.ad_2 * Y + this.state.adOffset);\r\n    calculateSRASCurve = (Y) => (this.state.expected_inflation + this.state.gamma * (Y - this.state.Y_P) + this.state.rho + this.state.srasOffset);\r\n    calculateSREquilibrium = () => ((this.state.ad_1 + this.state.adOffset + this.state.gamma * this.state.Y_P - this.state.rho - this.state.srasOffset - this.state.expected_inflation) / (this.state.ad_2 + this.state.gamma))\r\n    calculateTargetOutput = () => ((this.state.policyTarget + this.state.gamma * this.state.Y_P - this.state.rho - this.state.srasOffset - this.state.expected_inflation) / this.state.gamma)\r\n    \r\n    updateData(){\r\n        this.setState(prevState =>{\r\n            var data = prevState.data;\r\n            for (var i = 0; i < data.datasets.length - 1; i++) {\r\n                for (var j = 0; j < data.labels.length; j++) {\r\n                    var fct = data.datasets[i].function,\r\n                        x = data.labels[j],\r\n                        y = fct(x);\r\n                    data.datasets[i].data[j] = y;\r\n                }\r\n            }\r\n            return {data};\r\n        })\r\n    }\r\n    \r\n    checkError(yEquilibrium, equilibriumInflation){\r\n        // check if graph is correct\r\n        const lineChartUtils = new LineChartUtils(this.chartReference.current.chartInstance);\r\n        let [xTickMin, xTickMax, yTickMin, yTickMax] = lineChartUtils.getTickBounds();\r\n        if(yEquilibrium > xTickMax)\r\n            this.setState({displayMessage: Y_OUT_OF_BOUNDS})\r\n        else if(yEquilibrium < xTickMin)\r\n            this.setState({displayMessage: Y_NEGATIVE})\r\n        else if(equilibriumInflation > yTickMax || equilibriumInflation < yTickMin)\r\n            this.setState({displayMessage: INFLATION_OUT_OF_BOUNDS})\r\n        else if(this.state.policyChoice === POLICY_INFLATION){\r\n            var targetOutput = this.calculateTargetOutput();\r\n            if(this.state.policyTarget < this.state.data.datasets[1].data[0] \r\n                || this.state.policyTarget > this.state.data.datasets[1].data[1] \r\n                || targetOutput < xTickMin \r\n                || targetOutput > xTickMax)\r\n                this.setState({displayMessage: INFLATION_TARGET_OUT_OF_BOUNDS})\r\n            else\r\n                this.setState({displayMessage: NO_ERROR})\r\n        }\r\n        else\r\n            this.setState({displayMessage: NO_ERROR})\r\n    }\r\n\r\n    handleChange = () =>{\r\n        new Promise(resolve=>{\r\n            this.updateData();\r\n            resolve();\r\n        }).then(() => {\r\n            let yEquilibrium = this.calculateSREquilibrium();\r\n            let equilibriumInflation = this.calculateADCurve(yEquilibrium);     \r\n            // check for graph errors\r\n            new Promise(resolve => {\r\n                this.checkError(yEquilibrium, equilibriumInflation);\r\n                resolve();\r\n            }).then(() => {\r\n                this.chartReference.current.chartInstance.update();\r\n\r\n                if(this.state.displayMessage === NO_ERROR){\r\n                    this.setState(prevState => {\r\n                            let atEquilibrium = false;\r\n                            let displayMessage = -1;\r\n\r\n                            // check if at equilibrium\r\n                            if(Math.abs(yEquilibrium - this.getYPotential()) <= EPSILON){\r\n                                atEquilibrium = true;\r\n                                displayMessage = AT_EQUILIBRIUM;\r\n                            }\r\n                            else{\r\n                                atEquilibrium = false;\r\n                                displayMessage = prevState.policyChoice === -1 ? NO_POLICY_SELECTED : NO_ERROR;\r\n                            }\r\n\r\n                            return {atEquilibrium, displayMessage}\r\n                        }\r\n                    )\r\n                }\r\n            });\r\n        })\r\n    }\r\n\r\n    handleADChange = (event, newValue) => {\r\n        if(this.state.animationRunning) return;\r\n        this.setState({adOffset: newValue, prevEquilibrium: null}, \r\n                        ()=>{\r\n                            this.handleChange();\r\n                        });\r\n    }\r\n\r\n    handleSRASChange = (event, newValue) => {\r\n        if(this.state.animationRunning) return;\r\n        this.setState({srasOffset: newValue, prevEquilibrium: null}, \r\n                        ()=>{\r\n                            this.handleChange();\r\n                        });\r\n    }\r\n\r\n    handleLRASChange = (event, newValue) => {\r\n        if(this.state.animationRunning) return;\r\n        this.setState({lrasOffset: newValue, prevEquilibrium: null}, \r\n                        ()=>{\r\n                            this.handleChange();\r\n                        });\r\n        \r\n    }\r\n\r\n    handlePolicyTargetChange = (event, newValue) => {\r\n        if(this.state.animationRunning) return;\r\n        this.setState({policyTarget: newValue, prevEquilibrium: null},\r\n            () => {\r\n                this.handleChange();\r\n            })\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({adOffset: 0, srasOffset: 0, lrasOffset: 0, prevEquilibrium: null, policyChoice: -1}, \r\n                        () => {\r\n                            this.handleChange();\r\n                        })\r\n    }\r\n\r\n    canPlay = () =>{\r\n        return !(this.state.atEquilibrium \r\n                || this.state.policyChoice === -1 \r\n                || this.state.displayMessage !== NO_ERROR)\r\n    }\r\n\r\n    playDemo = async() => {\r\n        // check if can play\r\n        if(!this.canPlay()) return;\r\n\r\n        let yEquilibrium = this.calculateSREquilibrium();\r\n        let equilibriumInflation = this.calculateADCurve(yEquilibrium);\r\n        this.setState({animationRunning: true, prevEquilibrium: [yEquilibrium, equilibriumInflation]});\r\n        let yPotential = this.getYPotential();\r\n\r\n        let tracker = yEquilibrium;\r\n        let target = yPotential;\r\n        if(this.state.policyChoice === POLICY_INFLATION){\r\n            tracker = equilibriumInflation;\r\n            target = this.state.policyTarget;\r\n        }\r\n\r\n        // no policy\r\n        let sign = tracker > target ? 1 : -1;\r\n        if(this.state.policyChoice === POLICY_OUTPUT || this.state.policyChoice === POLICY_INFLATION)\r\n            sign *= -1;            \r\n        let dist =  Math.abs(tracker - target)\r\n        let step = Math.max(0.0005, dist / 10);\r\n\r\n        // play animation\r\n        await new Promise(resolve => {\r\n            const interval = setInterval(() => {\r\n                // check if animation done\r\n                if(Math.abs(tracker - target) <= EPSILON) {\r\n                    resolve();\r\n                    clearInterval(interval);\r\n                }\r\n\r\n                this.setState(prevState => {\r\n                    if(this.state.policyChoice === POLICY_NONE)\r\n                        return {srasOffset: prevState.srasOffset + sign * step}\r\n                    else if(this.state.policyChoice === POLICY_INFLATION)\r\n                        return {adOffset: prevState.adOffset + sign * step}\r\n                    else if(this.state.policyChoice === POLICY_OUTPUT)\r\n                        return {adOffset: prevState.adOffset + sign * step}\r\n                });\r\n\r\n                // update graph\r\n                this.handleChange();\r\n\r\n                // update values\r\n                tracker = this.calculateSREquilibrium();\r\n                if(this.state.policyChoice === POLICY_INFLATION)\r\n                    tracker = this.calculateADCurve(tracker);\r\n                dist =  Math.abs(tracker - target)\r\n                step = Math.max(0.0005, dist / 10);\r\n            }, 20);  \r\n        }).then(() => {\r\n            this.setState({animationRunning: false, atEquilibrium: true, policyChoice: -1}, \r\n                    // update graph one more time to remove target inflation annotation\r\n                    () => {\r\n                        this.handleChange();\r\n                    });   \r\n        });\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.updateData();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"adasScreen\" className=\"screen\">\r\n            <div className=\"graphPanel\">\r\n                <div className=\"graphContainer\">\r\n                    <Line\r\n                        ref={this.chartReference}\r\n                        data={this.state.data}\r\n                        plugins={[this.adasPlugin]}\r\n                        options={adasConfig}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"userInterface\">\r\n                <div className=\"sliderSection\">\r\n                    {this.sliderData.map((data, i) =>\r\n                        <ADASSlider key={\"slider\" + i} data={data}/>\r\n                    )}\r\n                    <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                        <div className=\"resetButton\" onClick={this.reset}>Reset</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"demoSection\">\r\n                    <div style={{display: \"flex\", alignItems: \"center\", position: \"relative\"}}>\r\n                        <p style={{fontWeight: 500, fontSize: \"1.3rem\"}}>Policy Response Demo</p>\r\n                        <HelpOutlineIcon id=\"demoHelpIcon\" style={{marginLeft:\"0.5rem\"}}/>\r\n                        <div id=\"helpTooltip\">Select a policy response to a supply or demand shock and play the animation to see its effect on the economy</div>\r\n                    </div>\r\n                    <div id=\"displayMessage\" \r\n                         style={{\r\n                            backgroundColor: displayMessages[this.state.displayMessage].color, \r\n                            opacity: ((this.state.policyChoice >= 0 && !this.state.atEquilibrium && this.canPlay()) || this.state.displayMessage === NO_ERROR) ? 0 : 1\r\n                         }}>\r\n                        <ErrorOutlineIcon style={{marginRight: \"0.5rem\"}}/>{displayMessages[this.state.displayMessage].message}\r\n                    </div>\r\n                    <div className=\"demoOptionsSection\">\r\n                        {demoOptionButtons.map((option, i) => {\r\n                            return <div className=\"demoOptionButton\" \r\n                                        onClick={()=>{\r\n                                            if(this.state.animationRunning) return;\r\n                                            this.setState(prevState => ({policyChoice: prevState.policyChoice === option.policyCode ? -1 : option.policyCode, policyTarget: DEFAULT_POLICY_TARGET, prevEquilibrium: null}),\r\n                                                        ()=>{\r\n                                                            this.handleChange();\r\n                                                        });\r\n                                        }} \r\n                                        key={\"optionBtn\" + option.policyCode}\r\n                                        style={{backgroundColor: this.state.policyChoice === i ? \"#69cdff\" : \"#b3b3b3\"}}\r\n                                    >\r\n                                        {option.text}\r\n                                    </div>\r\n                        })}\r\n                    </div>\r\n                    <div id=\"policyTargetInput\" style={{opacity: this.state.policyChoice === POLICY_INFLATION ? 1 : 0}}>\r\n                        <p>&#960;<sup>T</sup> = {this.state.policyTarget.toFixed(NUM_DECIMALS)}</p>\r\n                        <div id=\"policyTargetSlider\">\r\n                            <Slider value={this.state.policyTarget} \r\n                                    min={0}\r\n                                    max={5}\r\n                                    step={0.0001}\r\n                                    onChange={this.handlePolicyTargetChange} \r\n                            />\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"playButton\" \r\n                        onClick={this.playDemo}\r\n                        style={{backgroundColor: !this.canPlay() ? \"#757575\" : \"#00bf2d\"}}>\r\n                        <PlayCircleOutlineIcon style={{fontSize: \"2rem\", color: \"white\"}}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"descriptionSection\">\r\n                <h2>The Aggregate Demand and Supply Model</h2>\r\n                <p>\r\n                    The aggregate demand and supply model combines the aggregate demand and supply curves to determine the long-run output and inflation rate of the economy. \r\n                    It is composed of three curves: the aggregate demand curve, the short-run aggregate supply curve, and the long-run aggregate supply curve.\r\n                </p>\r\n                <h3>The Aggregate Demand Curve</h3>\r\n                <p>\r\n                    The aggregate demand (AD) curve shows the relationship between the inflation rate and planned expenditure, or the total quantity of output demanded. It is \r\n                    downward sloping because an increase in inflation prompts monetary authorities to raise real interest rates to control the inflation rate, ultimately lowering \r\n                    the aggregate demand (since it costs more to borrow money). Factors that affect the aggregate demand curve:\r\n                    <ol>\r\n                        <li>\r\n                            <b>Autonomous monetary policy:</b> As stated above, a higher real interest rate make financing investment projects more difficult due to a higher cost \r\n                            of borrowing, as well as lower consumer spending and net exports. Therefore, as the real interest rate rises, the AD curve shifts left.\r\n                        </li>\r\n                        <li>\r\n                            <b>Government purchases:</b> Government purchases directly add to total demand and causes the AD curve to shift right.\r\n                        </li>\r\n                        <li>\r\n                            <b>Taxes:</b> Higher taxes mean less income and less money the consumer has to spend, and so they will consume less. Therefore, an increase in taxes \r\n                            results in lower aggregate demand and a leftward shift in the AD curve.\r\n                        </li>\r\n                        <li>\r\n                            <b>Autonomous net exports:</b> An increase in net exports adds directly to total demand and causes the AD curve to shift right.\r\n                        </li>\r\n                        <li>\r\n                            <b>Autonomous consumption expenditure:</b> Autonomous consumption expenditure rises when consumers become more optimistic about the economy, adding \r\n                            directly to total demand and causing the AD curve to shift right.\r\n                        </li>\r\n                        <li>\r\n                            <b>Autonomous investment:</b> Autonomous investment rises when businesses become more optimistic about the economy, adding \r\n                            directly to total demand and causing the AD curve to shift right.\r\n                        </li>\r\n                    </ol>\r\n                </p>\r\n                <h3>The Aggregate Supply Curves</h3>\r\n                <p>\r\n                    There are two aggregate supply curves. In the long run, the total level of output is determined by the factors of production and the natural rate of unemployment \r\n                    and is independent of the inflation rate. Therefore, the long-run aggregate supply (LRAS) curve is a vertical line at the potential output (<i>Y<sup>P</sup></i>).\r\n                    Shifts to the LRAS curve are caused by long term shocks to the natural rate of unemployment and technology or long-run changes in the amount of labor or capital \r\n                    available. \r\n                </p>\r\n                <p>\r\n                    In the short run, wages and prices take time to adjust to economic conditions, resulting in inflation (or deflation). Therefore, rises in the level of output \r\n                    cause rises in the inflation rate and so the short-run aggregate supply (SRAS) curve is upward sloping. Factors that shift the SRAS curve:\r\n                    <ol>\r\n                        <li>\r\n                            <b>Expected inflation:</b> When expected inflation rises, workers and businesses want to raise wages and prices in anticipation of the higher inflation \r\n                            rate, causing the current inflation rate to rise. Therefore, an increase in expected inflation causes the SRAS curve to shift up. \r\n                        </li>\r\n                        <li>\r\n                            <b>Price shocks:</b> When firms raise prices due to supply restrictions or workers pushing for higher wages, inflation rises and the SRAS curve shifts up.\r\n                        </li>\r\n                        <li>\r\n                            <b>Persistent output gap:</b> When aggregate output remains above potential output, inflation rises, causing the SRAS curve to shift up. \r\n                        </li>\r\n                    </ol>\r\n                </p>\r\n                <h3>Equilibrium</h3>\r\n                <p>\r\n                    The short run equilibrium is where the AD curve intersects the SRAS curve. However, since the SRAS curve will shift if total output is different from potential \r\n                    output (<i>Y</i> &#8800; <i>Y<sup>P</sup></i>) because wages and prices are adjusting to a new expected rate of inflation, the economy will continue to move until \r\n                    it reaches the long run equilibrium, which is the intersection between the AD curve, SRAS curve, and LRAS curve. If the economy is not at the long term equilibrium, \r\n                    the SRAS curve will continuously adjust itself until it reaches the long term equilibrium due to the changing expected inflation factor in the SRAS curve. This is \r\n                    referred to as the self-correcting mechanism. \r\n                </p>\r\n                <h3>\r\n                    Policy Responses\r\n                </h3>\r\n                <p>\r\n                    In the event of a change in the economy due to supply or demand shocks, the monetary authorities can choose to enact policies to influence the economy. \r\n                    <ol>\r\n                        <li>\r\n                            <b>No response</b>: If the government does not respond, the economy will return to the long-run equilibrium by itself due to the self-correcting mechanism, \r\n                            although it may take some time.\r\n                        </li>\r\n                        <li>\r\n                            <b>Stabilizing inflation:</b> The government may choose to pursue a target inflation rate instead of bringing the economy back to its potential output and will \r\n                            change the real interest rate in order to move the AD curve until it intersects the SRAS curve at the target inflation rate.\r\n                        </li>\r\n                        <li>\r\n                            <b>Stabilizing output:</b> The government can speed up the economy's return to the potential output by changing the real interest rate in order to move the AD \r\n                            curve until it intersects the SRAS curve and LRAS curve. Although this active response is may result in a faster recovery than no response, it will change the \r\n                            inflation rate at the long run equilibrium.\r\n                        </li>\r\n                    </ol>\r\n                </p>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Scatter} from 'react-chartjs-2';\r\nimport { Slider } from '@material-ui/core';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\n\r\nimport LineChartUtils from '../utils/LineChartUtils';\r\nimport AnnotationRenderer from '../utils/AnnotationRenderer';  \r\nimport DefaultConfig from '../utils/ChartConfig';\r\n\r\nimport '../styles/SIModelScreen.css';\r\n\r\nconst NUM_DECIMALS = 4;\r\n\r\nfunction SISlider(props){\r\n    return (\r\n        <div className=\"sliderContainer\">\r\n            <p>{props.data.valueString} = {props.data.getValue().toFixed(NUM_DECIMALS)}</p>\r\n            <div className=\"slider\">\r\n                <Slider value={props.data.getValue()} \r\n                        min={props.data.bounds[0]}\r\n                        max={props.data.bounds[1]}\r\n                        step={0.0001}\r\n                        onChange={props.data.onChange} \r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst NUM_DATA_POINTS = 2;\r\nconst STEP = 10;\r\n\r\nconst NO_ERROR = 0;\r\nconst SI_OUT_OF_BOUNDS = 1;\r\nconst R_OUT_OF_BOUNDS = 2;\r\nconst R_W_OUT_OF_BOUNDS = 3;\r\nconst displayMessages = [\r\n    \"\",\r\n    \"S*, I* is out of range for the graph\",\r\n    \"r* is out of range for the graph\",\r\n    \"r\\u1D42 is out of range for the graph\",\r\n]\r\n\r\nconst CLOSED_ECONOMY = 0;\r\nconst OPEN_ECONOMY_SMALL = 1;\r\nconst OPEN_ECONOMY_LARGE = 2;\r\nconst DEFAULT_R_W = 2;\r\nvar economyOptionButtons = [\r\n    {\r\n        text: \"Closed economy\",\r\n        value: CLOSED_ECONOMY\r\n    },\r\n    {\r\n        text: \"Small open economy\",\r\n        value: OPEN_ECONOMY_SMALL\r\n    },\r\n    {\r\n        text: \"Large open economy\",\r\n        value: OPEN_ECONOMY_LARGE \r\n    }\r\n]  \r\n\r\nvar siConfigDomestic = JSON.parse(JSON.stringify(DefaultConfig));\r\nsiConfigDomestic.title.text = \"Domestic Saving and Investment\";\r\nsiConfigDomestic.scales.xAxes[0].scaleLabel.labelString = \"Desired saving and investment\";\r\nsiConfigDomestic.scales.xAxes[0].ticks.min = 0;\r\nsiConfigDomestic.scales.xAxes[0].ticks.display = true;\r\nsiConfigDomestic.legend.display = false;\r\nsiConfigDomestic.scales.yAxes[0].scaleLabel.labelString = \"Real interest rate (r)\";\r\nsiConfigDomestic.scales.yAxes[0].ticks.min = 0;\r\nsiConfigDomestic.scales.xAxes[0].ticks.display = true;\r\n\r\nvar siConfigWorld = JSON.parse(JSON.stringify(siConfigDomestic));\r\nsiConfigWorld.title.text = \"World Saving and Investment\";\r\nsiConfigWorld.legendCallback = function(chart) {\r\n    return <ul>\r\n        {chart.data.datasets.map(set=>{\r\n            return <li key={set.label} className=\"legendItem\">\r\n                <div className=\"legendColor\" style={{backgroundColor: set.borderColor}}/>\r\n                <p>{set.label}</p>\r\n            </li>\r\n        })}\r\n    </ul>\r\n}\r\n\r\nconst VERTICAL_ANNOTATION_OFFSET = 20;\r\nconst HORIZONTAL_ANNOTATION_OFFSET = 35;\r\nconst annotationColor = \"#e01bda\";\r\n\r\nexport default class SIModelScreen extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            domesticVars: {\r\n                Y: 9, // aggregate output\r\n                C_auto: 8, // autonomous consumption\r\n                G: 6, // government consumption\r\n                T: 3, // net taxes\r\n                I_auto: 10, // autonomous investment\r\n                savingOffset: 0, \r\n                investmentOffset: 0,\r\n                data: {\r\n                    datasets: []\r\n                }\r\n            },\r\n            worldVars: {\r\n                Y: 9, // aggregate output\r\n                C_auto: 8, // autonomous consumption\r\n                G: 6, // government consumption\r\n                T: 3, // net taxes\r\n                I_auto: 10, // autonomous investment\r\n                savingOffset: 0, \r\n                investmentOffset: 0,\r\n                data: {\r\n                    datasets: []\r\n                }\r\n            },\r\n            r_w: DEFAULT_R_W, // world real interest rate\r\n            worldOffset: 0,\r\n            economyType: CLOSED_ECONOMY,\r\n            displayMessage: NO_ERROR,\r\n            chartLegend: \"\",\r\n        }\r\n        // populate datasets\r\n        var colors = [\"rgb(255, 163, 15)\", \"rgb(35, 187, 247)\"];\r\n        var graphs = [this.state.domesticVars, this.state.worldVars];\r\n        graphs.forEach(graph =>{\r\n            graph.data.datasets = [\r\n                {\r\n                    label: 'Saving curve',\r\n                    function: (r)=>(this.calculateSavingCurve(r, graph)),\r\n                },\r\n                {\r\n                    label: 'Investment curve',\r\n                    function:(r)=>(this.calculateInvestmentCurve(r, graph)),\r\n                },\r\n            ]\r\n            graph.data.datasets.forEach((set, i)=>{\r\n                set.data = new Array(NUM_DATA_POINTS);\r\n                set.borderColor = colors[i];\r\n                set.borderWidth = 2; \r\n                set.fill = false;\r\n                set.pointRadius = 0;\r\n                set.pointHoverRadius = 0;\r\n                set.tension = 0;\r\n                set.showLine = true;\r\n            })\r\n        })        \r\n\r\n        this.domesticChartReference = React.createRef();\r\n        this.worldChartReference = React.createRef();\r\n\r\n        this.sliderData = [\r\n            {\r\n                getValue: this.getSavingOffset,\r\n                valueString: \"Saving curve offset\",\r\n                bounds: [-5, 5],\r\n                onChange: this.handleSavingChange,\r\n            },\r\n            {\r\n                getValue: this.getInvestmentOffset,\r\n                valueString: \"Investment curve offset\",\r\n                bounds: [-5, 5],\r\n                onChange: this.handleInvestmentChange,\r\n            },\r\n        ];\r\n        this.domesticPlugin = {\r\n            id: \"domesticPlugin\",\r\n            // draw annotation lines\r\n            afterDatasetDraw: chart => {\r\n                const lineChartUtils = new LineChartUtils(chart);\r\n                const options = lineChartUtils.options;\r\n                const ctx = chart.ctx;\r\n            \r\n                const optionsHandler = new AnnotationRenderer(ctx, options);\r\n                optionsHandler.shadow();\r\n            \r\n                let rEquilibrium = this.calculateEquilibrium();\r\n                let siEquilibrium = this.calculateInvestmentCurve(rEquilibrium, this.state.domesticVars);\r\n                let equilibriumPoint = lineChartUtils.calculatePointPixels(siEquilibrium, rEquilibrium);\r\n                let [, bottom, left,] = lineChartUtils.getChartBoundaries();\r\n\r\n                // r* horizontal line\r\n                if(this.state.displayMessage === R_OUT_OF_BOUNDS) return;\r\n                if(this.state.economyType === CLOSED_ECONOMY){\r\n                    optionsHandler.drawLineOffsetAnnotation(\r\n                        equilibriumPoint[1],\r\n                        left,\r\n                        equilibriumPoint[0],\r\n                    );\r\n                    optionsHandler.writeAnnotation(\r\n                        \"r* = \" + rEquilibrium.toFixed(2),\r\n                        left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                        equilibriumPoint[1],\r\n                        annotationColor \r\n                    )\r\n                }\r\n\r\n                if(this.state.displayMessage === R_OUT_OF_BOUNDS || this.state.displayMessage === R_W_OUT_OF_BOUNDS) return;\r\n                if(this.state.economyType !== CLOSED_ECONOMY){\r\n                    let investment = this.calculateInvestmentCurve(this.state.r_w, this.state.domesticVars);\r\n                    let saving = this.calculateSavingCurve(this.state.r_w, this.state.domesticVars);\r\n                    let furthestX = Math.max(investment, saving);\r\n                    let rWPoint = lineChartUtils.calculatePointPixels(furthestX, this.state.r_w);\r\n                    \r\n                    // r_w horizontal line\r\n                    optionsHandler.drawLineOffsetAnnotation(\r\n                        rWPoint[1],\r\n                        left,\r\n                        rWPoint[0],\r\n                    );\r\n                    optionsHandler.writeAnnotation(\r\n                        \"r\\u1D42 = \" + this.state.r_w.toFixed(2),\r\n                        left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                        rWPoint[1],\r\n                        annotationColor \r\n                    )\r\n\r\n                    // net exports line\r\n                    var deficitColor = \"#f54c4c\";\r\n                    var surplusColor = \"#0eab00\";\r\n                    var isNxPositive = this.state.r_w > rEquilibrium;\r\n                    let nxPoint1 = lineChartUtils.calculatePointPixels(Math.min(investment, saving), this.state.r_w);\r\n                    let nxPoint2 = lineChartUtils.calculatePointPixels(Math.max(investment, saving), this.state.r_w);\r\n                    let sign = isNxPositive ? -1 : 1;\r\n                    let annotationPoint = [(nxPoint1[0] + nxPoint2[0]) / 2, nxPoint1[1] + 20 * sign]\r\n                    optionsHandler.drawHorizontalLine(\r\n                        nxPoint1[1],\r\n                        nxPoint1[0],\r\n                        nxPoint2[0],\r\n                        isNxPositive ? surplusColor : deficitColor\r\n                    );\r\n                    optionsHandler.drawVerticalLine(\r\n                        nxPoint1[0],\r\n                        nxPoint1[1] - 5,\r\n                        nxPoint1[1] + 5,\r\n                        isNxPositive ? surplusColor : deficitColor\r\n                    );\r\n                    optionsHandler.drawVerticalLine(\r\n                        nxPoint2[0],\r\n                        nxPoint2[1] - 5,\r\n                        nxPoint2[1] + 5,\r\n                        isNxPositive ? surplusColor : deficitColor\r\n                    );\r\n                    optionsHandler.writeAnnotation(\r\n                        \"NX: \" + (isNxPositive ? \"surplus\" : \"deficit\"),\r\n                        annotationPoint[0],\r\n                        annotationPoint[1],\r\n                        isNxPositive ? surplusColor : deficitColor \r\n                    ) \r\n                }\r\n\r\n                // S*, I* vertical line\r\n                if(this.state.economyType !== CLOSED_ECONOMY || this.state.displayMessage === SI_OUT_OF_BOUNDS) return;\r\n                optionsHandler.drawLineHeightAnnotation(\r\n                    equilibriumPoint[0],\r\n                    bottom,\r\n                    equilibriumPoint[1]\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"S*, I* = \" + siEquilibrium.toFixed(2),\r\n                    equilibriumPoint[0],\r\n                    bottom + VERTICAL_ANNOTATION_OFFSET,\r\n                    annotationColor\r\n                )\r\n            }\r\n        };\r\n        this.worldPlugin = {\r\n            id: \"worldPlugin\",\r\n            // draw annotation lines\r\n            afterDatasetDraw: chart => {\r\n                const lineChartUtils = new LineChartUtils(chart);\r\n                const options = lineChartUtils.options;\r\n                const ctx = chart.ctx;\r\n            \r\n                const optionsHandler = new AnnotationRenderer(ctx, options);\r\n                optionsHandler.shadow();\r\n            \r\n                let [, , left,] = lineChartUtils.getChartBoundaries();\r\n\r\n                // r_w horizontal line\r\n                if(this.state.displayMessage === R_OUT_OF_BOUNDS || this.state.displayMessage === R_W_OUT_OF_BOUNDS) return;\r\n                if(this.state.economyType !== CLOSED_ECONOMY){\r\n                    let furthestX = Math.max(this.calculateInvestmentCurve(this.state.r_w, this.state.worldVars), this.calculateSavingCurve(this.state.r_w, this.state.worldVars));\r\n                    let rWPoint = lineChartUtils.calculatePointPixels(furthestX, this.state.r_w);\r\n                    optionsHandler.drawLineOffsetAnnotation(\r\n                        rWPoint[1],\r\n                        left,\r\n                        rWPoint[0],\r\n                    );\r\n                    optionsHandler.writeAnnotation(\r\n                        \"r\\u1D42 = \" + this.state.r_w.toFixed(2),\r\n                        left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                        rWPoint[1],\r\n                        annotationColor \r\n                    )\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getSavingOffset = () => (this.state.domesticVars.savingOffset);\r\n    getInvestmentOffset = () => (this.state.domesticVars.investmentOffset);\r\n\r\n    // get equilibrium real interest rate\r\n    calculateEquilibrium = () => ((this.state.domesticVars.I_auto + this.state.domesticVars.G - 2 * this.state.domesticVars.Y + this.state.domesticVars.C_auto + this.state.domesticVars.T + this.state.domesticVars.investmentOffset - this.state.domesticVars.savingOffset) / 2)\r\n    calculateWorldEquilibrium = () => ((this.state.worldVars.I_auto + this.state.worldVars.G - 2 * this.state.worldVars.Y + this.state.worldVars.C_auto + this.state.worldVars.T + this.state.worldVars.investmentOffset - this.state.worldVars.savingOffset) / 2)\r\n    calculateSavingCurve = (r, data) => (data.Y - data.C_auto + (data.Y - data.T) + r - data.G + data.savingOffset);\r\n    calculateInvestmentCurve = (r, data) => (data.I_auto - r + data.investmentOffset);\r\n    // get r_w for large open economy\r\n    calculateRW = () =>{\r\n        var r = this.calculateEquilibrium();\r\n        var worldEquilibriumR = this.calculateWorldEquilibrium();\r\n        var sign = worldEquilibriumR < r ? -1 : 1;\r\n\r\n        var d1 = this.calculateSavingCurve(r, this.state.domesticVars);\r\n        var d2 = this.calculateInvestmentCurve(r, this.state.domesticVars);\r\n        var w1 = this.calculateSavingCurve(r, this.state.worldVars);\r\n        var w2 = this.calculateInvestmentCurve(r, this.state.worldVars);\r\n\r\n        var diff = Math.abs(Math.abs(d1 - d2) - Math.abs(w1 - w2));\r\n        var step = Math.max(0.0025, diff / 10);\r\n        var epsilon = 0.005;\r\n\r\n        while(diff > epsilon){\r\n            r += step * sign;\r\n            d1 = this.calculateSavingCurve(r, this.state.domesticVars);\r\n            d2 = this.calculateInvestmentCurve(r, this.state.domesticVars);\r\n            w1 = this.calculateSavingCurve(r, this.state.worldVars);\r\n            w2 = this.calculateInvestmentCurve(r, this.state.worldVars);\r\n            diff = Math.abs(Math.abs(d1 - d2) - Math.abs(w1 - w2));\r\n            step = Math.max(0.0025, diff / 10);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    updateData(){\r\n        this.setState(prevState => {\r\n            var domesticVars = prevState.domesticVars;\r\n            var worldVars = prevState.worldVars;\r\n            var datasets = [domesticVars.data, worldVars.data]\r\n            datasets.forEach(data=>{\r\n                for (var i = 0; i < data.datasets.length; i++) {\r\n                    for (var j = 0; j < NUM_DATA_POINTS; j++) {\r\n                        var fct = data.datasets[i].function,\r\n                            y = j * STEP,\r\n                            x = fct(y);\r\n                        data.datasets[i].data[j] = {x, y};\r\n                    }\r\n                }\r\n            })\r\n            return {domesticVars, worldVars}\r\n        })\r\n    }\r\n    \r\n    checkError(siEquilibrium, rEquilibrium){\r\n        // check if graph is correct\r\n        const lineChartUtils = new LineChartUtils(this.domesticChartReference.current.chartInstance);\r\n        let [xTickMin, xTickMax, yTickMin, yTickMax] = lineChartUtils.getTickBounds();\r\n        if(siEquilibrium > xTickMax || siEquilibrium < xTickMin)\r\n            this.setState({displayMessage: SI_OUT_OF_BOUNDS})\r\n        else if(rEquilibrium > yTickMax || rEquilibrium < yTickMin)\r\n            this.setState({displayMessage: R_OUT_OF_BOUNDS})\r\n        else if(this.state.r_w < yTickMin)\r\n            this.setState({displayMessage: R_W_OUT_OF_BOUNDS})\r\n        else\r\n            this.setState({displayMessage: NO_ERROR})\r\n    }\r\n\r\n    handleChange = () =>{\r\n        new Promise(resolve =>{\r\n            this.updateData();\r\n            let rEquilibrium = this.calculateEquilibrium();\r\n            let siEquilibrium = this.calculateInvestmentCurve(rEquilibrium, this.state.domesticVars);\r\n\r\n            if(this.state.economyType === OPEN_ECONOMY_LARGE)\r\n                this.setState({r_w: this.calculateRW()})\r\n\r\n            // check for graph errors\r\n            this.checkError(siEquilibrium, rEquilibrium);\r\n            resolve();\r\n        }).then(()=>{\r\n            // keep axis scales synchronized between the two graphs\r\n            this.worldChartReference.current.chartInstance.chart.options.scales.xAxes[0].ticks.max = this.domesticChartReference.current.chartInstance.scales[\"x-axis-0\"].max;\r\n            this.worldChartReference.current.chartInstance.chart.options.scales.yAxes[0].ticks.max = this.domesticChartReference.current.chartInstance.scales[\"y-axis-0\"].max;\r\n\r\n            this.domesticChartReference.current.chartInstance.update();\r\n            this.worldChartReference.current.chartInstance.update();\r\n        })\r\n    }\r\n        \r\n    handleSavingChange = (event, newValue) => {\r\n        this.setState((prevState)=>{\r\n            var domesticVars = prevState.domesticVars;\r\n            domesticVars.savingOffset = newValue;\r\n            return {domesticVars};\r\n        }, () => {\r\n            this.handleChange();\r\n        });\r\n    }\r\n\r\n    handleInvestmentChange = (event, newValue) => {\r\n        this.setState((prevState)=>{\r\n            var domesticVars = prevState.domesticVars;\r\n            domesticVars.investmentOffset = newValue;\r\n            return {domesticVars};\r\n        }, () => {\r\n            this.handleChange();\r\n        });\r\n    }\r\n\r\n    handleWorldRChange = (event, newValue) => {\r\n        const lineChartUtils = new LineChartUtils(this.domesticChartReference.current.chartInstance);\r\n        let [, , , yTickMax] = lineChartUtils.getTickBounds();\r\n        this.setState({r_w: Math.min(yTickMax, newValue)}, () => {\r\n            this.handleChange();\r\n        });\r\n    }\r\n\r\n    handleWorldOffsetChange = (event, newValue) => {\r\n        this.setState((prevState)=>{\r\n            var worldVars = prevState.worldVars;\r\n            worldVars.investmentOffset = newValue;\r\n            worldVars.savingOffset = -newValue;\r\n            return {worldVars};\r\n        }, () => {\r\n            this.handleChange();\r\n        });\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState(prevState => {\r\n            var domesticVars = prevState.domesticVars;\r\n            domesticVars.savingOffset = 0;\r\n            domesticVars.investmentOffset = 0;\r\n            return {domesticVars};\r\n        }, () => {\r\n            this.handleChange();\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.setState({chartLegend: this.worldChartReference.current.chartInstance.generateLegend()});\r\n        this.updateData();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div id=\"siScreen\" className=\"screen\">\r\n            <div className=\"graphPanel\">\r\n                <div className=\"graphContainer\">\r\n                    <Scatter\r\n                        ref={this.domesticChartReference}\r\n                        data={this.state.domesticVars.data}\r\n                        plugins={[this.domesticPlugin]}\r\n                        options={siConfigDomestic}\r\n                    />\r\n                </div>\r\n                <div className=\"graphContainer\" style={{display: this.state.economyType === OPEN_ECONOMY_LARGE ? \"block\" : \"none\"}}>\r\n                    <Scatter\r\n                        ref={this.worldChartReference}\r\n                        data={this.state.worldVars.data}\r\n                        plugins={[this.worldPlugin]}\r\n                        options={siConfigWorld}\r\n                    />\r\n                </div>\r\n                <div className=\"legendContainer\">\r\n                    {this.state.chartLegend}\r\n                </div>\r\n            </div>\r\n            <div className=\"userInterface\">\r\n                <div className=\"sliderSection\">\r\n                    <div style={{display:\"flex\", justifyContent:\"center\", width: \"100%\"}}>\r\n                        <div className=\"errorDisplay\" style={{opacity: this.state.displayMessage === NO_ERROR ? 0 : 1}}>\r\n                            <div style={{display:\"flex\", alignItem:\"center\"}}>\r\n                                <ErrorOutlineIcon style={{marginRight:\"0.5rem\"}}/>\r\n                                {displayMessages[this.state.displayMessage]}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                    {this.sliderData.map((data, i) =>\r\n                        <SISlider key={\"slider\" + i} data={data}/>\r\n                    )}\r\n                    <div style={{width: \"100%\", display: \"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\r\n                        <div className=\"resetButton\" onClick={this.reset}>Reset</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"optionsSection\">\r\n                    <p style={{fontWeight: 500, fontSize: \"1.3rem\", margin: 0}}>Pick economy type:</p>\r\n                    <div className=\"buttonSection\">\r\n                        {economyOptionButtons.map((option, i) => {\r\n                                return <div className=\"optionButton\" onClick={()=>{\r\n                                    this.setState({economyType: option.value, r_w: DEFAULT_R_W, worldOffset: 0}, ()=>{\r\n                                        this.handleChange()\r\n                                    })\r\n                                }} \r\n                                key={\"optionBtn\" + option.value}\r\n                                style={{backgroundColor: this.state.economyType === i ? \"#69cdff\" : \"#b3b3b3\"}}>\r\n                                    {option.text}\r\n                                </div>\r\n                        })}\r\n                    </div>\r\n                    <div className=\"openEconomyInputSection\">\r\n                        <div className=\"openEconomyInput\" style={{display: this.state.economyType === OPEN_ECONOMY_SMALL ? \"block\" : \"none\"}}>\r\n                            <p>r<sup>W</sup> = {this.state.r_w.toFixed(NUM_DECIMALS)}</p>\r\n                            <div className=\"openEconomySlider\">\r\n                                <Slider value={this.state.r_w} \r\n                                        min={0}\r\n                                        max={10}\r\n                                        step={0.0001}\r\n                                        onChange={this.handleWorldRChange} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                        <div className=\"openEconomyInput\" style={{display: this.state.economyType === OPEN_ECONOMY_LARGE ? \"block\" : \"none\"}}>\r\n                            <p>World equilibrium offset = {this.state.worldVars.investmentOffset.toFixed(NUM_DECIMALS)}</p>\r\n                            <div className=\"openEconomySlider\">\r\n                                <Slider value={this.state.worldVars.investmentOffset} \r\n                                        min={-10}\r\n                                        max={10}\r\n                                        step={0.0001}\r\n                                        onChange={this.handleWorldOffsetChange} \r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n           <div className=\"descriptionSection\">\r\n                <h2>\r\n                    The Saving and Investment Model\r\n                </h2>\r\n                <p>\r\n                    The saving and investment model shows the real interest rate at the equilibrium level of saving and investment in an economy. A country's national saving \r\n                    is what is left of the total output after subtracting private and government consumption (<i>Y</i> - <i>C</i> - <i>G</i>). <i>S</i> = <i>I</i> + <i>NX</i>&nbsp;\r\n                    is the uses-of-saving identity and it reveals that savings are turned into either investments (<i>I</i>) or net exports (<i>NX</i>). When a country's investments \r\n                    are greater than its savings, the economy experiences negative net exports, or a trade deficit, because it needs foreign capital to fund its excess investments. \r\n                    On the other hand, if savings are greater than investments, the economy experiences a trade surplus because it invests its extra savings in foreign economies, \r\n                    and these investments are categorized as net exports. There are three types of economies that have different goods equlibrium conditions: closed economy, small open \r\n                    economy, and large open economy. \r\n                </p>\r\n                <h3>\r\n                    Closed Economy\r\n                </h3>\r\n                <p>\r\n                    A closed economy is an economy that is closed to international trade, so it has zero net exports (<i>NX</i> = 0). Therefore, the condition for the goods market \r\n                    equilibrium is that saving is equal to investment (<i>S</i> = <i>I</i>). The real interest rate at the goods equilibrium is <i>r*</i>. If <i>r</i> &#62; <i>r*</i>,\r\n                    then the desired investment is less than the desired saving in the economy, and so potential investors are willing to borrow less than savers are willing to lend. \r\n                    Lenders will then lower the interest rate to make more loans, causing <i>r</i> to fall until it reaches <i>r*</i>. Similarly, if <i>r</i> &#60; <i>r*</i>,\r\n                    then the desired investment is greater than the desired saving in the economy, and so investors want to borrow more than savers are willing to lend.\r\n                    The real interest rate will rise, causing <i>r</i> to fall until it reaches <i>r*</i>. \r\n                </p>\r\n                <h3>\r\n                    Small Open Economy\r\n                </h3>\r\n                <p>\r\n                    A small open economy is an economy that has perfect capital mobility, meaning there are not restrictions on flows of capital between domestic and foreign economies. \r\n                    The domestic real interest rate must match the world real interest rate (<i>r<sup>w</sup></i>). Since there is international trade, net exports is no longer zero and \r\n                    the equilibrium condition is <i>NX</i> = <i>S</i> - <i>I</i>. The flow of capital out of a small open economy is small relative to the world economy, so changes in \r\n                    the saving or investment of this economy have no effect on the domestic real interest rate, which is equal to <i>r<sup>w</sup></i>. The small open economy takes&nbsp;\r\n                    <i>r<sup>w</sup></i> as given from the world economy and its equilibrium saving and investment is dependent on this interest rate. If <i>r<sup>w</sup></i> is greater \r\n                    than the real interest rate the economy would have if it was close (<i>r<sub>E</sub></i>), the economy runs a trade surplus. On the other hand, if <i>r<sup>w</sup></i> \r\n                    is less than <i>r<sub>E</sub></i>, the economy runs a trade deficit.\r\n                </p>\r\n                <h3>\r\n                    Large Open Economy\r\n                </h3>\r\n                <p>\r\n                    A large open economy is similar to a small open economy, but the flow of capital out of a large open economy is large relative to the world economy, so changes in the economy \r\n                    can affect both the domestic real interest rate and <i>r<sup>w</sup></i>. The equilibrium interest rate is where <i>NX<sub>D</sub></i> = -<i>NX<sub>W</sub></i>, where&nbsp; \r\n                    <i>NX<sub>D</sub></i> is the domestic net exports and <i>NX<sub>W</sub></i> is the world net exports.\r\n                </p>\r\n            </div>     \r\n        </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Scatter} from 'react-chartjs-2';\r\nimport { Slider } from '@material-ui/core';\r\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline';\r\n\r\nimport LineChartUtils from '../utils/LineChartUtils';\r\nimport AnnotationRenderer from '../utils/AnnotationRenderer';  \r\nimport DefaultConfig from '../utils/ChartConfig';\r\n\r\nimport '../styles/CumulativeScreen.css';\r\n\r\nconst NUM_DECIMALS = 4;\r\n\r\nfunction CumulativeSlider(props){\r\n    return (\r\n        <div className=\"sliderContainer\">\r\n            <p>{props.data.valueString} = {props.data.getValue().toFixed(NUM_DECIMALS)}</p>\r\n            <div className=\"slider\">\r\n                <Slider value={props.data.getValue()} \r\n                        min={props.data.bounds[0]}\r\n                        max={props.data.bounds[1]}\r\n                        step={0.0001}\r\n                        onChange={props.data.onChange} \r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst NUM_DATA_POINTS = 2;\r\n\r\nconst NO_ERROR = 0;\r\nconst R_OUT_OF_BOUNDS = 1;\r\nconst INFLATION_OUT_OF_BOUNDS = 2;\r\nconst OUTPUT_OUT_OF_BOUNDS = 3;\r\nconst UNEMPLOYMENT_OUT_OF_BOUNDS = 4;\r\nconst displayMessages = [\r\n    \"\",\r\n    \"r is out of range for the graph\",\r\n    \"\\u03C0 is out of range for the graph\",\r\n    \"Y is out of range for the graph\",\r\n    \"U is out of range for the graph\",\r\n]\r\n\r\nvar mpConfig = JSON.parse(JSON.stringify(DefaultConfig));\r\nmpConfig.title.text = \"MP Curve\";\r\nmpConfig.legend.display = false;\r\nmpConfig.scales.xAxes[0].scaleLabel.labelString = \"Inflation rate (\\u03C0)\";\r\nmpConfig.scales.yAxes[0].scaleLabel.labelString = \"Real interest rate (r)\";\r\nmpConfig.layout.padding.bottom = 20;\r\n// mpConfig.scales.xAxes[0].ticks.display = true;\r\n// mpConfig.scales.yAxes[0].ticks.display = true;\r\n\r\nvar isConfig = JSON.parse(JSON.stringify(mpConfig));\r\nisConfig.title.text = \"IS Curve\";\r\nisConfig.scales.xAxes[0].scaleLabel.labelString = \"Aggregate output (Y)\";\r\n\r\nvar adConfig = JSON.parse(JSON.stringify(isConfig));\r\nadConfig.title.text = \"AD Curve\";\r\nadConfig.scales.yAxes[0].scaleLabel.labelString = \"Inflation rate (\\u03C0)\";\r\nadConfig.scales.yAxes[0].ticks.beginAtZero = false;\r\n\r\nvar pcConfig = JSON.parse(JSON.stringify(adConfig));\r\npcConfig.title.text = \"Phillips Curve\";\r\npcConfig.scales.xAxes[0].scaleLabel.labelString = \"Unemployment rate (U)\";\r\npcConfig.scales.yAxes[0].ticks.beginAtZero = false;\r\n\r\nvar okunsConfig = JSON.parse(JSON.stringify(pcConfig));\r\nokunsConfig.title.text = \"Okun's Law\";\r\nokunsConfig.scales.yAxes[0].scaleLabel.labelString = \"Aggregate output (Y)\";\r\n\r\nconst VERTICAL_ANNOTATION_OFFSET = 20;\r\nconst HORIZONTAL_ANNOTATION_OFFSET = 35;\r\nconst annotationColor = \"#e01bda\";\r\n\r\nexport default class CumulativeScreen extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.mpChartReference = React.createRef();\r\n        this.isChartReference = React.createRef();\r\n        this.adChartReference = React.createRef();\r\n        this.pcChartReference = React.createRef();\r\n        this.okunsChartReference = React.createRef();\r\n\r\n        this.mpPlugin = {\r\n            id: \"mpPlugin\",\r\n            // draw annotation lines\r\n            afterDatasetDraw: chart => {\r\n                if(this.state.displayMessage.mp !== NO_ERROR) return;\r\n\r\n                const lineChartUtils = new LineChartUtils(chart);\r\n                const options = lineChartUtils.options;\r\n                const ctx = chart.ctx;\r\n            \r\n                const optionsHandler = new AnnotationRenderer(ctx, options);\r\n                optionsHandler.shadow();\r\n            \r\n                let [, bottom, left,] = lineChartUtils.getChartBoundaries();\r\n\r\n                // r horizontal line\r\n                let selectedInflation = this.calculateMPInflation(this.state.mpVars.r);\r\n                let mpPoint = lineChartUtils.calculatePointPixels(selectedInflation, this.state.mpVars.r);\r\n                optionsHandler.drawLineOffsetAnnotation(\r\n                    mpPoint[1],\r\n                    left,\r\n                    mpPoint[0],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"r = \" + this.state.mpVars.r.toFixed(2),\r\n                    left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                    mpPoint[1],\r\n                    annotationColor \r\n                )\r\n\r\n                // inflation vertical line\r\n                optionsHandler.drawLineHeightAnnotation(\r\n                    mpPoint[0],\r\n                    bottom,\r\n                    mpPoint[1],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"\\u03C0 = \" + selectedInflation.toFixed(2),\r\n                    mpPoint[0],\r\n                    bottom + VERTICAL_ANNOTATION_OFFSET,\r\n                    annotationColor \r\n                )\r\n            }\r\n        };\r\n        this.isPlugin = {\r\n            id: \"isPlugin\",\r\n            // draw annotation lines\r\n            afterDatasetDraw: chart => {\r\n                if(this.state.displayMessage.is !== NO_ERROR) return;\r\n\r\n                const lineChartUtils = new LineChartUtils(chart);\r\n                const options = lineChartUtils.options;\r\n                const ctx = chart.ctx;\r\n            \r\n                const optionsHandler = new AnnotationRenderer(ctx, options);\r\n                optionsHandler.shadow();\r\n            \r\n                let [, bottom, left,] = lineChartUtils.getChartBoundaries();\r\n\r\n                // r horizontal line\r\n                let mpPoint = lineChartUtils.calculatePointPixels(this.state.adVars.Y, this.state.mpVars.r);\r\n                optionsHandler.drawLineOffsetAnnotation(\r\n                    mpPoint[1],\r\n                    left,\r\n                    mpPoint[0],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"r = \" + this.state.mpVars.r.toFixed(2),\r\n                    left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                    mpPoint[1],\r\n                    annotationColor \r\n                )\r\n\r\n                // Y vertical line\r\n                optionsHandler.drawLineHeightAnnotation(\r\n                    mpPoint[0],\r\n                    bottom,\r\n                    mpPoint[1],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"Y = \" + this.state.adVars.Y.toFixed(2),\r\n                    mpPoint[0],\r\n                    bottom + VERTICAL_ANNOTATION_OFFSET,\r\n                    annotationColor \r\n                )\r\n            }\r\n        };\r\n        this.adPlugin = {\r\n            id: \"adPlugin\",\r\n            // draw annotation lines\r\n            afterDatasetDraw: chart => {\r\n                if(this.state.displayMessage.ad !== NO_ERROR) return;\r\n\r\n                const lineChartUtils = new LineChartUtils(chart);\r\n                const options = lineChartUtils.options;\r\n                const ctx = chart.ctx;\r\n            \r\n                const optionsHandler = new AnnotationRenderer(ctx, options);\r\n                optionsHandler.shadow();\r\n            \r\n                let [, bottom, left,] = lineChartUtils.getChartBoundaries();\r\n\r\n                // Y vertical line\r\n                let adPoint = lineChartUtils.calculatePointPixels(this.state.adVars.Y, this.state.pcVars.inflation);\r\n                optionsHandler.drawLineHeightAnnotation(\r\n                    adPoint[0],\r\n                    bottom,\r\n                    adPoint[1],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"Y = \" + this.state.adVars.Y.toFixed(2),\r\n                    adPoint[0],\r\n                    bottom + VERTICAL_ANNOTATION_OFFSET,\r\n                    annotationColor \r\n                )\r\n\r\n                // inflation horizontal line\r\n                optionsHandler.drawLineOffsetAnnotation(\r\n                    adPoint[1],\r\n                    left,\r\n                    adPoint[0],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"\\u03C0 = \" + this.state.pcVars.inflation.toFixed(2),\r\n                    left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                    adPoint[1],\r\n                    annotationColor \r\n                )\r\n            }\r\n        };\r\n        this.pcPlugin = {\r\n            id: \"pcPlugin\",\r\n            // draw annotation lines\r\n            afterDatasetDraw: chart => {\r\n                if(this.state.displayMessage.pc !== NO_ERROR) return;\r\n\r\n                const lineChartUtils = new LineChartUtils(chart);\r\n                const options = lineChartUtils.options;\r\n                const ctx = chart.ctx;\r\n            \r\n                const optionsHandler = new AnnotationRenderer(ctx, options);\r\n                optionsHandler.shadow();\r\n            \r\n                let [, bottom, left,] = lineChartUtils.getChartBoundaries();\r\n\r\n                // inflation horizontal line\r\n                let pcPoint = lineChartUtils.calculatePointPixels(this.state.okunsVars.U, this.state.pcVars.inflation);\r\n                optionsHandler.drawLineOffsetAnnotation(\r\n                    pcPoint[1],\r\n                    left,\r\n                    pcPoint[0],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"\\u03C0 = \" + this.state.pcVars.inflation.toFixed(2),\r\n                    left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                    pcPoint[1],\r\n                    annotationColor \r\n                )\r\n\r\n                // U vertical line\r\n                optionsHandler.drawLineHeightAnnotation(\r\n                    pcPoint[0],\r\n                    bottom,\r\n                    pcPoint[1],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"U = \" + this.state.okunsVars.U.toFixed(2),\r\n                    pcPoint[0],\r\n                    bottom + VERTICAL_ANNOTATION_OFFSET,\r\n                    annotationColor \r\n                )\r\n            }\r\n        };\r\n        this.okunsPlugin = {\r\n            id: \"okunsPlugin\",\r\n            // draw annotation lines\r\n            afterDatasetDraw: chart => {\r\n                if(this.state.displayMessage.okuns !== NO_ERROR) return;\r\n\r\n                const lineChartUtils = new LineChartUtils(chart);\r\n                const options = lineChartUtils.options;\r\n                const ctx = chart.ctx;\r\n            \r\n                const optionsHandler = new AnnotationRenderer(ctx, options);\r\n                optionsHandler.shadow();\r\n            \r\n                let [, bottom, left,] = lineChartUtils.getChartBoundaries();\r\n\r\n                // Y horizontal line\r\n                let selectedY = this.calculateOkunsCurve(this.state.okunsVars.U);\r\n                let okunsPoint = lineChartUtils.calculatePointPixels(this.state.okunsVars.U, selectedY);\r\n                optionsHandler.drawLineOffsetAnnotation(\r\n                    okunsPoint[1],\r\n                    left,\r\n                    okunsPoint[0],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"Y = \" + selectedY.toFixed(2),\r\n                    left - HORIZONTAL_ANNOTATION_OFFSET,\r\n                    okunsPoint[1],\r\n                    annotationColor \r\n                )\r\n\r\n                // U vertical line\r\n                optionsHandler.drawLineHeightAnnotation(\r\n                    okunsPoint[0],\r\n                    bottom,\r\n                    okunsPoint[1],\r\n                );\r\n                optionsHandler.writeAnnotation(\r\n                    \"U = \" + this.state.okunsVars.U.toFixed(2),\r\n                    okunsPoint[0],\r\n                    bottom + VERTICAL_ANNOTATION_OFFSET,\r\n                    annotationColor \r\n                )\r\n            }\r\n        };\r\n\r\n        this.state = {\r\n            mpVars: {\r\n                r: 2, // real interest rate\r\n                lambda: 1.1, //responsiveness of real interest rate to inflation rate\r\n                r_auto: 2, // autonomous component of the real interest rate\r\n            },\r\n            isVars:{\r\n                slope: -1,\r\n                constant: 10,\r\n                offset: 0\r\n            },\r\n            adVars: {\r\n                slope: 1,\r\n                constant: 0,\r\n                offset: 0,\r\n                Y: 10, // output\r\n            },\r\n            pcVars:{\r\n                inflation: 2,\r\n                expectedInflation: 10,\r\n                U_n: 2,\r\n                omega: 0.7, // sensitivity of inflation to changes in the unemployment gap\r\n                rho: 0, // price shocks\r\n            },\r\n            okunsVars:{\r\n                slope: -1,\r\n                constant: 0,\r\n                offset: 0,\r\n                Y_P: 16,\r\n                U: 2, // rate of unemployment\r\n            },\r\n            datasets:{\r\n                mp: [\r\n                    {\r\n                        label: 'MP curve',\r\n                        function: this.calculateMPCurve,\r\n                    }\r\n                ],\r\n                is: [\r\n                    {\r\n                        label: 'IS curve',\r\n                        function: this.calculateISCurve,\r\n                    }\r\n                ],\r\n                ad: [\r\n                    {\r\n                        label: 'AD curve',\r\n                        function: this.calculateADCurve,\r\n                    }\r\n                ],\r\n                pc: [\r\n                    {\r\n                        label: 'Phillips curve',\r\n                        function: this.calculatePCCurve,\r\n                    }\r\n                ],\r\n                okuns: [\r\n                    {\r\n                        label: \"Okun's law\",\r\n                        function: this.calculateOkunsCurve,\r\n                    }\r\n                ],\r\n            },\r\n            displayMessage: {\r\n              mp: NO_ERROR,\r\n              is: NO_ERROR,\r\n              ad: NO_ERROR,\r\n              pc: NO_ERROR,\r\n              okuns: NO_ERROR,\r\n            },\r\n        };\r\n\r\n        // populate datasets\r\n        for (const graph in this.state.datasets) {\r\n            this.state.datasets[graph].forEach(set=>{\r\n                set.data = new Array(NUM_DATA_POINTS);\r\n                set.borderColor = \"rgb(255, 163, 15)\";\r\n                set.borderWidth = 2; \r\n                set.fill = false;\r\n                set.pointRadius = 0;\r\n                set.pointHoverRadius = 0;\r\n                set.tension = 0;\r\n                set.showLine = true;\r\n            })\r\n        }        \r\n\r\n        this.graphs = {\r\n            mp: {\r\n                id: \"mpCurve\",\r\n                swap: false,\r\n                step: 10,\r\n                chartReference: this.mpChartReference,\r\n                plugin: this.mpPlugin,\r\n                options: mpConfig,\r\n                getMessage: this.getMPMessage,\r\n                data:{\r\n                    datasets: this.state.datasets.mp\r\n                }\r\n            },\r\n            is: {\r\n                id: \"isCurve\",\r\n                swap: false,\r\n                step: 10,\r\n                chartReference: this.isChartReference,\r\n                plugin: this.isPlugin,\r\n                options: isConfig,\r\n                getMessage: this.getISMessage,\r\n                data: {\r\n                    datasets: this.state.datasets.is\r\n                }\r\n            },\r\n            ad: {\r\n                id: \"adCurve\",\r\n                swap: true,\r\n                step: 10,\r\n                chartReference: this.adChartReference,\r\n                plugin: this.adPlugin,\r\n                options: adConfig,\r\n                getMessage: this.getADMessage,\r\n                data: {\r\n                    datasets: this.state.datasets.ad\r\n                }\r\n            },\r\n            pc: {\r\n                id: \"pcCurve\",\r\n                swap: false,\r\n                step: 10,\r\n                chartReference: this.pcChartReference,\r\n                plugin: this.pcPlugin,\r\n                options: pcConfig,\r\n                getMessage: this.getPCMessage,\r\n                data:{\r\n                    datasets: this.state.datasets.pc\r\n                }\r\n            },\r\n            okuns:{\r\n                id: \"okunsCurve\",\r\n                swap: false,\r\n                step: 10,\r\n                chartReference: this.okunsChartReference,\r\n                plugin: this.okunsPlugin,\r\n                options: okunsConfig,\r\n                getMessage: this.getOkunsMessage,\r\n                data:{\r\n                    datasets: this.state.datasets.okuns\r\n                }\r\n            }\r\n        };\r\n\r\n        this.sliderData = {\r\n            mp: [\r\n                {\r\n                    getValue: this.getR,\r\n                    valueString: \"r\",\r\n                    bounds: [0, 10],\r\n                    onChange: this.handleRChange,\r\n                },\r\n                {\r\n                    getValue: this.getLambda,\r\n                    valueString: \"\\u03BB\",\r\n                    bounds: [-2, 2],\r\n                    onChange: this.handleLambdaChange,\r\n                },\r\n                {\r\n                    getValue: this.getRAuto,\r\n                    valueString: \"r\\u0305\",\r\n                    bounds: [0, 5],\r\n                    onChange: this.handleRAutoChange,\r\n                },\r\n            ],\r\n            is:[\r\n                {\r\n                    getValue: this.getISOffset,\r\n                    valueString: \"IS curve offset\",\r\n                    bounds: [-5, 5],\r\n                    onChange: this.handleISOffsetChange,\r\n                },\r\n            ],\r\n            ad:[\r\n                {\r\n                    getValue: this.getYPotential,\r\n                    valueString: \"Y\\u1D3E\",\r\n                    bounds: [0, 10],\r\n                    onChange: this.handleYPotentialChange,\r\n                },\r\n            ],\r\n            pc:[\r\n                {\r\n                    getValue: this.getUNatural,\r\n                    valueString: \"U\\u2099\",\r\n                    bounds: [0, 10],\r\n                    onChange: this.handleUNaturalChange,\r\n                },\r\n            ],\r\n        }\r\n    }\r\n\r\n    getR = () => (this.state.mpVars.r);\r\n    getLambda = () => (this.state.mpVars.lambda);\r\n    getRAuto = () => (this.state.mpVars.r_auto);\r\n    getISSlope = () => (this.state.isVars.slope);\r\n    getISOffset = () => (this.state.isVars.offset);\r\n    getADSlope = () => (this.state.adVars.slope);\r\n    getADOffset = () => (this.state.adVars.offset);\r\n    getUNatural = () => (this.state.pcVars.U_n);\r\n    getOmega = () => (this.state.pcVars.omega);\r\n    getRho = () => (this.state.pcVars.rho);\r\n    getOkunsSlope = () => (this.state.okunsVars.slope);\r\n    getOkunsOffset = () => (this.state.okunsVars.offset);\r\n\r\n    getMPMessage = () => (this.state.displayMessage.mp);\r\n    getISMessage = () => (this.state.displayMessage.is);\r\n    getADMessage = () => (this.state.displayMessage.ad);\r\n    getPCMessage = () => (this.state.displayMessage.pc);\r\n    getOkunsMessage = () => (this.state.displayMessage.okuns);\r\n\r\n    calculateMPInflation = (r) => ((r - this.state.mpVars.r_auto) / this.state.mpVars.lambda)\r\n    calculateMPCurve = (inflation) => (this.state.mpVars.r_auto + this.state.mpVars.lambda * inflation)\r\n    calculateISCurve = (Y) => (this.state.isVars.constant + this.state.isVars.slope * Y + this.state.isVars.offset);\r\n    calculateISOutput = (r) =>((r - this.state.isVars.constant - this.state.isVars.offset) / this.state.isVars.slope);\r\n    calculateADCurve = (Y) => (this.state.adVars.constant + this.state.adVars.slope * Y + this.state.adVars.offset);\r\n    calculatePCCurve = (U) => (this.state.pcVars.expectedInflation - this.state.pcVars.omega * (U - this.state.pcVars.U_n) + this.state.pcVars.rho)\r\n    calculatePCUnemployment = (inflation) => (this.state.pcVars.U_n + (this.state.pcVars.rho + this.state.pcVars.expectedInflation - inflation) / this.state.pcVars.omega)\r\n    calculateOkunsCurve = (U) => (2 * (this.state.pcVars.U_n - U) + this.state.okunsVars.Y_P)\r\n    calculateOkunsUnemployment = (Y) => (-0.5 * (Y - this.state.okunsVars.Y_P) + this.state.pcVars.U_n)\r\n\r\n    updateCharts(){\r\n        this.mpChartReference.current.chartInstance.update();\r\n        this.isChartReference.current.chartInstance.update();\r\n        this.adChartReference.current.chartInstance.update();\r\n        this.pcChartReference.current.chartInstance.update();\r\n        this.okunsChartReference.current.chartInstance.update();\r\n    }\r\n\r\n    syncAxes(){\r\n        var rTickMax = Math.max(this.mpChartReference.current.chartInstance.chart.scales[\"y-axis-0\"].max, this.isChartReference.current.chartInstance.chart.scales[\"y-axis-0\"].max)\r\n        this.mpChartReference.current.chartInstance.chart.options.scales.yAxes[0].ticks.max = rTickMax;\r\n        this.isChartReference.current.chartInstance.chart.options.scales.yAxes[0].ticks.max = rTickMax;\r\n\r\n        var yTickMax = Math.max(this.isChartReference.current.chartInstance.chart.scales[\"x-axis-0\"].max, this.adChartReference.current.chartInstance.chart.scales[\"x-axis-0\"].max)\r\n        this.isChartReference.current.chartInstance.chart.options.scales.xAxes[0].ticks.max = yTickMax;\r\n        this.adChartReference.current.chartInstance.chart.options.scales.xAxes[0].ticks.max = yTickMax;\r\n\r\n        var inflationTickMax = Math.max(this.adChartReference.current.chartInstance.chart.scales[\"y-axis-0\"].max, this.pcChartReference.current.chartInstance.chart.scales[\"y-axis-0\"].max)\r\n        this.adChartReference.current.chartInstance.chart.options.scales.yAxes[0].ticks.max = inflationTickMax;\r\n        this.pcChartReference.current.chartInstance.chart.options.scales.yAxes[0].ticks.max = inflationTickMax;\r\n        var inflationTickMin = Math.max(this.adChartReference.current.chartInstance.chart.scales[\"y-axis-0\"].min, this.pcChartReference.current.chartInstance.chart.scales[\"y-axis-0\"].min)\r\n        this.adChartReference.current.chartInstance.chart.options.scales.yAxes[0].ticks.min = inflationTickMin;\r\n        this.pcChartReference.current.chartInstance.chart.options.scales.yAxes[0].ticks.min = inflationTickMin;\r\n\r\n        var uTickMax = Math.max(this.pcChartReference.current.chartInstance.chart.scales[\"x-axis-0\"].max, this.okunsChartReference.current.chartInstance.chart.scales[\"x-axis-0\"].max)\r\n        this.pcChartReference.current.chartInstance.chart.options.scales.xAxes[0].ticks.max = uTickMax;\r\n        this.okunsChartReference.current.chartInstance.chart.options.scales.xAxes[0].ticks.max = uTickMax;\r\n    }\r\n\r\n    updateData(){\r\n        this.setState(prevState => {\r\n            // update annotations\r\n            var adVars = prevState.adVars;\r\n            adVars.Y = this.calculateISOutput(this.state.mpVars.r);\r\n            var pcVars = prevState.pcVars;\r\n            pcVars.inflation = this.calculateADCurve(adVars.Y);\r\n            var okunsVars = prevState.okunsVars;\r\n            okunsVars.U = this.calculatePCUnemployment(pcVars.inflation);\r\n\r\n            // update graph data\r\n            var graphs = prevState.datasets;\r\n            for (const key in graphs) {\r\n                var datasets = graphs[key];\r\n                for(var i = 0; i < datasets.length; i++){\r\n                    var set = datasets[i];\r\n                    for (var j = 0; j < NUM_DATA_POINTS; j++) {\r\n                        var fct = set.function;\r\n                        var x, y;\r\n                        if(this.graphs[key].swap){\r\n                            y = j * this.graphs[key].step;\r\n                            x = fct(y);\r\n                        }\r\n                        else{\r\n                            x = j * this.graphs[key].step;\r\n                            y = fct(x);\r\n                        }\r\n                            \r\n                        set.data[j] = {x, y};\r\n                    }\r\n                }\r\n            }  \r\n            return {adVars, pcVars, okunsVars, graphs}\r\n        })\r\n    }\r\n    \r\n    checkError(){\r\n        // mp\r\n        let lineChartUtils = new LineChartUtils(this.mpChartReference.current.chartInstance);\r\n        let [xTickMin, xTickMax, yTickMin, yTickMax] = lineChartUtils.getTickBounds();\r\n        let r = this.state.mpVars.r;\r\n        let selectedInflation = this.calculateMPInflation(r);\r\n        this.setState(prevState=>{\r\n            var displayMessage = prevState.displayMessage;\r\n            if(r > yTickMax || r < yTickMin)\r\n                displayMessage.mp = R_OUT_OF_BOUNDS;\r\n            else if(selectedInflation > xTickMax || selectedInflation < xTickMin)\r\n                displayMessage.mp = INFLATION_OUT_OF_BOUNDS;            \r\n            else\r\n                displayMessage.mp = NO_ERROR;            \r\n            return {displayMessage};\r\n        })\r\n\r\n        // is\r\n        lineChartUtils = new LineChartUtils(this.isChartReference.current.chartInstance);\r\n        [xTickMin, xTickMax, yTickMin, yTickMax] = lineChartUtils.getTickBounds();\r\n        let Y = this.state.adVars.Y;\r\n        this.setState(prevState=>{\r\n            var displayMessage = prevState.displayMessage;\r\n            if(r > yTickMax || r < yTickMin)\r\n                displayMessage.is = R_OUT_OF_BOUNDS;\r\n            else if(Y > xTickMax || Y < xTickMin)\r\n                displayMessage.is = OUTPUT_OUT_OF_BOUNDS;            \r\n            else\r\n                displayMessage.is = NO_ERROR;            \r\n            return {displayMessage};\r\n        })\r\n\r\n        // ad\r\n        lineChartUtils = new LineChartUtils(this.adChartReference.current.chartInstance);\r\n        [xTickMin, xTickMax, yTickMin, yTickMax] = lineChartUtils.getTickBounds();\r\n        let inflation = this.state.pcVars.inflation;\r\n        this.setState(prevState=>{\r\n            var displayMessage = prevState.displayMessage;\r\n            if(inflation > yTickMax || inflation < yTickMin)\r\n                displayMessage.ad = INFLATION_OUT_OF_BOUNDS;\r\n            else if(Y > xTickMax || Y < xTickMin)\r\n                displayMessage.ad = OUTPUT_OUT_OF_BOUNDS;            \r\n            else\r\n                displayMessage.ad = NO_ERROR;            \r\n            return {displayMessage};\r\n        })\r\n        \r\n        // pc\r\n        lineChartUtils = new LineChartUtils(this.pcChartReference.current.chartInstance);\r\n        [xTickMin, xTickMax, yTickMin, yTickMax] = lineChartUtils.getTickBounds();\r\n        let U = this.state.okunsVars.U;\r\n        this.setState(prevState=>{\r\n            var displayMessage = prevState.displayMessage;\r\n            if(inflation > yTickMax || inflation < yTickMin)\r\n                displayMessage.pc = INFLATION_OUT_OF_BOUNDS;\r\n            else if(U > xTickMax || U < xTickMin)\r\n                displayMessage.pc = UNEMPLOYMENT_OUT_OF_BOUNDS;            \r\n            else\r\n                displayMessage.pc = NO_ERROR;            \r\n            return {displayMessage};\r\n        })\r\n        \r\n        // okuns\r\n        lineChartUtils = new LineChartUtils(this.okunsChartReference.current.chartInstance);\r\n        [xTickMin, xTickMax, yTickMin, yTickMax] = lineChartUtils.getTickBounds();\r\n        Y = this.calculateOkunsCurve(U);\r\n        this.setState(prevState=>{\r\n            var displayMessage = prevState.displayMessage;\r\n            if(Y > yTickMax || Y < yTickMin)\r\n                displayMessage.okuns = OUTPUT_OUT_OF_BOUNDS;\r\n            else if(U > xTickMax || U < xTickMin)\r\n                displayMessage.okuns = UNEMPLOYMENT_OUT_OF_BOUNDS;  \r\n            else\r\n                displayMessage.okuns = NO_ERROR;  \r\n            return {displayMessage};\r\n        })\r\n    }\r\n\r\n    handleChange = () =>{\r\n        new Promise(resolve =>{\r\n            this.updateData();\r\n            resolve();\r\n        }).then(()=>{\r\n            // // check for graph errors\r\n            this.checkError();\r\n        }).then(()=>{\r\n            this.updateCharts();\r\n            this.syncAxes();\r\n            this.updateCharts();\r\n        })\r\n    }\r\n        \r\n    handleRChange = (event, newValue) => {\r\n        this.setState((prevState)=>{\r\n            var mpVars = prevState.mpVars;\r\n            mpVars.r = newValue;\r\n            return {mpVars};\r\n        }, () => {\r\n            this.handleChange();\r\n        });\r\n    }\r\n\r\n    handleInvestmentChange = (event, newValue) => {\r\n        this.setState((prevState)=>{\r\n            var domesticVars = prevState.domesticVars;\r\n            domesticVars.investmentOffset = newValue;\r\n            return {domesticVars};\r\n        }, () => {\r\n            this.handleChange();\r\n        });\r\n    }\r\n\r\n    handleWorldRChange = (event, newValue) => {\r\n        const lineChartUtils = new LineChartUtils(this.domesticChartReference.current.chartInstance);\r\n        let [, , , yTickMax] = lineChartUtils.getTickBounds();\r\n        this.setState({r_w: Math.min(yTickMax, newValue)}, () => {\r\n            this.handleChange();\r\n        });\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState(prevState => {\r\n            var domesticVars = prevState.domesticVars;\r\n            domesticVars.savingOffset = 0;\r\n            domesticVars.investmentOffset = 0;\r\n            return {domesticVars};\r\n        }, () => {\r\n            this.handleChange();\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.handleChange();\r\n    }\r\n\r\n    render() {\r\n        var count = 0;\r\n        return (\r\n        <div id=\"cumulativeScreen\" className=\"screen\">\r\n            <div className=\"graphPanel\">\r\n                {\r\n                    Array.from(Array(9).keys()).map(i => {\r\n                        if(i === 3)\r\n                            return <div style={{flex: 1}}>\r\n                                <p>Set real inflation rate:</p>\r\n                                <CumulativeSlider data={this.sliderData.mp[0]} key={\"slider\" + i}/>\r\n                            </div>\r\n                        else if (i === 2 || i === 6 || i === 7)\r\n                            return <div className=\"graphContainer\" key={\"filler\" + i}/>\r\n                        else{\r\n                            var graph = this.graphs[Object.keys(this.graphs)[count++]] \r\n                            return <div style={{flex: 1, display: \"flex\", flexDirection: \"column\", alignItems: \"center\"}} key={graph.id}>\r\n                                <div className=\"graphContainer\">\r\n                                    <Scatter\r\n                                        ref={graph.chartReference}\r\n                                        data={graph.data}\r\n                                        plugins={[graph.plugin]}\r\n                                        options={graph.options}\r\n                                    />\r\n                                </div>\r\n                                <div className=\"errorDisplay\" style={{opacity: graph.getMessage() === NO_ERROR ? 0 : 1}}>\r\n                                    <div style={{display:\"flex\", alignItem:\"center\"}}>\r\n                                        <ErrorOutlineIcon style={{fontSize: \"1.3rem\", marginRight:\"0.3rem\"}}/>\r\n                                        {displayMessages[graph.getMessage()]}                                    \r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        }\r\n                    })\r\n                }\r\n            </div>                \r\n        </div>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\nimport {HashRouter, Route} from 'react-router-dom';\n\nimport './styles/App.css';\n\nimport NavPanel from './components/NavPanel';\nimport SolowModelScreen from './screens/SolowModelScreen';\nimport ADASModelScreen from './screens/ADASModelScreen';\nimport SIModelScreen from './screens/SIModelScreen';\nimport CumulativeScreen from './screens/CumulativeScreen';\n\nconst App = () => {\n    return (\n        <HashRouter basename=\"/\">\n            <div className=\"App\">\n                <NavPanel/>\n                <main>\n                    <Route path=\"/\" exact={true} component={SolowModelScreen}/>\n                    <Route path=\"/solow-model\" exact={true} component={SolowModelScreen}/>\n                    <Route path=\"/ad-as-model\" exact={true} component={ADASModelScreen}/>\n                    <Route path=\"/saving-investment-model\" exact={true} component={SIModelScreen}/>\n                    <Route path=\"/cumulative-graphs\" exact={true} component={CumulativeScreen}/>\n                </main>\n            </div>\n        </HashRouter>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}